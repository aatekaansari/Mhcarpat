<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MH Qadri Export Rugs</title>
  
  <!-- मैनिफेस्ट फ़ाइल का लिंक (यह ज़रूरी है) -->
  <link rel="manifest" href="manifest.json">
  
  <!-- ऐप का थीम कलर -->
  <meta name="theme-color" content="#2196F3"/>
  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>
  <style>
    /* --- General Styles --- */
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f4;
      color: #333;
      padding-top: 60px; /* Adjusted based on fixed header */
      padding-bottom: 40px; /* Adjusted based on fixed footer */
      box-sizing: border-box;
      min-height: 100vh; /* Ensure body takes full height */
    }
    header, footer#footer {
      background-color: #2196F3;
      color: white;
      width: 100%;
      position: fixed;
      left: 0;
      z-index: 100;
      box-sizing: border-box;
    }
    header {
      top: 0;
      padding: 10px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      height: 60px;
    }
    header #logo {
      max-height: 40px;
      display: none; /* Initially hidden, shown if logo exists */
    }
    header h1 {
      font-size: 18px;
      margin: 0;
      text-align: center;
      flex-grow: 1;
      cursor: pointer; /* Indicates it's editable */
    }
    #sidebar-toggle {
      font-size: 24px;
      background: none;
      border: none;
      color: white;
      cursor: pointer;
      display: none; /* Initially hidden, shown when logged in */
      padding: 0 10px;
      margin-left: 10px;
    }
    /* --- Sidebar & Overlay --- */
    #sidebar {
      position: fixed;
      top: 0;
      right: -250px; /* Start off-screen */
      width: 250px;
      height: 100%;
      background-color: #333;
      color: white;
      transition: right 0.3s ease;
      z-index: 200;
      padding: 20px;
      box-sizing: border-box;
      overflow-y: auto;
      display: flex;
      flex-direction: column;
    }
    #sidebar.active {
      right: 0; /* Slide in */
    }
    #sidebar button {
      display: block;
      width: 100%;
      padding: 10px;
      margin: 8px 0;
      background-color: #2196F3;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      text-align: left;
      flex-shrink: 0; /* Prevent buttons from shrinking */
    }
    #sidebar button:hover {
      background-color: #1976D2;
    }
    #backup-data-btn {
      background-color: #FFC107;
      color: #333;
    }
    #backup-data-btn:hover {
      background-color: #FFA000;
    }
    #sidebar .sidebar-spacer {
      flex-grow: 1; /* Pushes close button to bottom */
    }
    #sidebar #close-sidebar-btn {
      margin-top: auto; /* Stick to the bottom */
      background-color: #607D8B;
    }
    #sidebar #close-sidebar-btn:hover {
      background-color: #455A64;
    }
    #overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: none; /* Shown when sidebar is active */
      z-index: 150;
    }
    #overlay.active {
      display: block;
    }
    /* --- Footer --- */
    footer#footer {
      bottom: 0;
      padding: 10px 0;
      font-size: 14px;
      display: flex; /* Use flex for centering */
      justify-content: center;
      align-items: center;
      height: 40px;
      gap: 10px; /* Space if adding more items */
    }
    /* --- Login Page Specific Styles --- */
    #login-page {
      background-color: #E3F2FD;
      min-height: 100vh;
      display: flex; /* Use flex for centering */
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding-top: 70px; /* Account for header */
      padding-bottom: 50px; /* Account for footer */
      box-sizing: border-box;
    }
    #login-page h2 {
      margin-bottom: 25px;
      color: #1E88E5;
      text-align: center;
      font-size: 24px;
    }
    #login-form {
      background-color: white;
      padding: 35px;
      border-radius: 10px;
      box-shadow: 0 6px 20px rgba(0,0,0,0.12);
      width: 100%;
      max-width: 340px; /* Limit form width */
      box-sizing: border-box;
    }
    #login-form .form-group {
      margin-bottom: 18px;
    }
    #login-form label {
      display: block;
      margin-bottom: 6px;
      font-weight: bold;
      color: #444;
    }
    #login-form input[type="text"],
    #login-form input[type="password"] {
      width: 100%;
      padding: 14px;
      margin: 5px 0; /* Adjust margin */
      border: 1px solid #bdbdbd;
      border-radius: 5px;
      box-sizing: border-box;
      font-size: 16px;
    }
    #login-form input[type="text"]:focus,
    #login-form input[type="password"]:focus {
      border-color: #2196F3;
      outline: none;
      box-shadow: 0 0 8px rgba(33, 150, 243, 0.4);
    }
    #login-form button {
      width: 100%;
      padding: 14px;
      background-color: #2196F3;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 17px;
      font-weight: bold;
      transition: background-color 0.3s ease;
      margin-top: 15px; /* Space before button */
    }
    #login-form button:hover {
      background-color: #1976D2;
    }
    #description {
      max-width: 600px;
      text-align: left;
      border: 2px solid #90CAF9;
      padding: 25px;
      border-radius: 10px;
      background-color: #ffffff;
      box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    }
    #description p {
      margin: 0;
      line-height: 1.7;
      color: #333;
    }
    #login-footer {
      background-color: #1E88E5; /* Slightly different blue for login footer */
      color: white;
      text-align: center;
      padding: 12px 0;
      position: fixed;
      bottom: 0;
      width: 100%;
      font-size: 14px;
      z-index: 100;
    }
    /* Login page layout adjustments */
    #login-page .login-container {
      display: flex;
      flex-direction: column; /* Stack login and description by default */
      justify-content: center;
      align-items: center;
      gap: 35px; /* Space between login box and description box */
      width: 100%;
      max-width: 600px; /* Max width for the content, description box will define this */
      padding: 20px;
      box-sizing: border-box;
    }
    #login-page .login-box {
      width: 100%;
      max-width: 340px; /* Keep login box width consistent */
    }
    #login-page .description-box {
      width: 100%;
      max-width: 600px; /* Allow description to be wider */
    }

    /* Responsive adjustments for login page */
    @media (min-width: 768px) {
      #login-page {
        padding-top: 80px; /* More space on larger screens */
      }
      #login-page .login-container {
        flex-direction: column;
        align-items: center;
        gap: 40px;
        max-width: 600px;
      }
      #login-page .login-box {
        max-width: 380px;
      }
      #login-page .description-box {
        max-width: 600px;
      }
      #login-form {
        padding: 40px;
      }
      #description {
        padding: 30px;
      }
    }
    /* --- End of Login Page Specific Styles --- */

    /* --- Profile Buttons Container --- */
    #profile-buttons-container {
      width: 100%;
      background-color: #424242; /* Dark grey background */
      padding: 10px 5px;
      position: fixed;
      top: 60px; /* Below header */
      left: 0;
      display: none; /* Hidden initially, shown when logged in */
      flex-direction: column; /* Stack action buttons and profile buttons */
      gap: 10px;
      align-items: center;
      z-index: 99; /* Below header but above content */
      box-sizing: border-box;
    }
    #profile-action-buttons {
      display: flex;
      justify-content: center;
      gap: 15px;
      margin-bottom: 10px; /* Space below action buttons */
      flex-wrap: wrap; /* Allow wrapping on smaller screens */
    }
    .fixed-btn { /* Style for Add Company/Contractor buttons */
      border: none;
      border-radius: 4px;
      padding: 8px 15px;
      font-size: 14px;
      font-weight: bold;
      cursor: pointer;
      color: white;
      transition: background-color 0.3s ease;
    }
    #company-fixed-btn { background-color: #4CAF50; } /* Green */
    #company-fixed-btn:hover { background-color: #43A047; }
    #contractor-fixed-btn { background-color: #FF9800; } /* Orange */
    #contractor-fixed-btn:hover { background-color: #FB8C00; }

    #company-profile-buttons,
    #contractor-buttons-container {
      width: 100%;
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 5px;
      padding: 0 10px; /* Padding for the container */
      box-sizing: border-box;
    }
    #company-profile-buttons button,
    #contractor-buttons-container button { /* Style for individual profile buttons */
      border: none;
      border-radius: 4px;
      padding: 6px 12px;
      font-size: 12px;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease; /* Added box-shadow transition */
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    #company-profile-buttons button { background-color: #9C27B0; } /* Purple */
    #contractor-buttons-container button { background-color: #FF5722; } /* Deep Orange */

    #company-profile-buttons button:hover,
    #contractor-buttons-container button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px rgba(0,0,0,0.15);
    }
     #company-profile-buttons button:hover { background-color: #7B1FA2; }
     #contractor-buttons-container button:hover { background-color: #E64A19; }

    #company-profile-buttons button.selected,
    #contractor-buttons-container button.selected {
        background-color: #FFEB3B; /* Yellow highlight */
        color: #333; /* Dark text for yellow background */
        font-weight: bold;
        transform: translateY(0); /* No lift on selected */
        box-shadow: 0 1px 2px rgba(0,0,0,0.2); /* Subtle shadow */
    }

    /* --- Main Content Area --- */
    main {
      padding: 20px;
      max-width: 100%; /* Allow full width */
      overflow-x: hidden; /* Prevent horizontal scroll on main */
      margin-top: 140px; /* Default margin, adjusted by JS */
      box-sizing: border-box;
    }
    section {
      display: none; /* All sections hidden initially */
      margin-bottom: 30px;
      background-color: #BBDEFB; /* Light blue background for sections */
      padding: 25px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    section h2 {
      margin-top: 0;
      color: #1976D2; /* Darker blue for headings */
      border-bottom: 2px solid #1976D2;
      padding-bottom: 10px;
      margin-bottom: 20px;
    }
    /* Specific section styles */
    #change-password-section {
      background-color: #ffcdd2; /* Light red */
      border: 1px solid #e57373;
    }
    #change-password-section h2 {
      color: #d32f2f; /* Dark red */
      border-bottom-color: #d32f2f;
    }

    /* --- Tables --- */
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
      min-width: 600px; /* Minimum width for horizontal scroll */
      background-color: #fff;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    table, th, td {
      border: 1px solid #ddd; /* Light grey border */
    }
    th, td {
      padding: 12px 15px;
      text-align: left;
      font-size: 14px;
      word-wrap: break-word; /* Wrap long text */
      vertical-align: middle; /* Align content vertically */
    }
    th {
      background-color: #2196F3; /* Header background */
      color: white;
      font-weight: bold;
      position: sticky; /* Make header sticky within container */
      top: 0; /* Stick to top of scrolling container */
      z-index: 10; /* Above table body */
    }
    tbody tr:hover {
      background-color: #f5f5f5; /* Row hover effect */
    }
    .table-container {
      overflow-x: auto; /* Enable horizontal scroll for the table */
      -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
      margin-bottom: 20px;
      border: 1px solid #ddd; /* Border around the scrolling area */
      border-radius: 4px;
    }

    /* --- Forms --- */
    .form-group {
      margin-bottom: 20px;
    }
    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: bold;
      color: #555;
    }
    input[type="text"],
    input[type="date"],
    input[type="number"],
    input[type="password"],
    select,
    textarea { /* Added textarea */
      width: 100%;
      padding: 10px 12px;
      margin: 5px 0;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
      font-size: 16px; /* Larger font for inputs */
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
      font-family: Arial, sans-serif; /* Ensure textarea inherits font */
    }
    input[type="text"]:focus,
    input[type="date"]:focus,
    input[type="number"]:focus,
    input[type="password"]:focus,
    select:focus,
    textarea:focus { /* Added textarea */
      border-color: #2196F3;
      outline: none;
      box-shadow: 0 0 5px rgba(33, 150, 243, 0.5);
    }
    input[name="date"] { /* Specific style for date inputs if needed */
      border-color: #2196F3;
    }
    input[readonly], input.readonly-display {
      background-color: #e0e0e0; /* Grey out readonly fields */
      cursor: not-allowed;
      border-color: #ccc;
      box-shadow: none;
    }
    /* Display Info Box Style */
    .display-info {
      margin-bottom: 15px;
      padding: 10px;
      background-color: #e0f2f7; /* Light cyan background */
      border-left: 4px solid #0288d1; /* Blue left border */
      border-radius: 4px;
    }
    .display-info p {
      margin: 5px 0;
      font-size: 15px;
      color: #333;
    }
    .display-info p span { /* Style for the value part */
      font-weight: bold;
      color: #01579B; /* Darker blue */
      margin-left: 5px;
    }

    /* --- Buttons --- */
    button { /* General button style */
      background-color: #2196F3;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      margin: 5px; /* Spacing around buttons */
      transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      vertical-align: middle; /* Align buttons nicely if inline */
    }
    button:hover {
      background-color: #1976D2;
      transform: translateY(-2px); /* Lift effect */
      box-shadow: 0 4px 6px rgba(0,0,0,0.15);
    }
    button:active {
      transform: translateY(0px); /* Press effect */
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    button[type="button"] { /* Default style for Cancel/Back buttons */
      background-color: #f44336; /* Red */
    }
    button[type="button"]:hover {
      background-color: #d32f2f;
    }
    /* Vertical form layout */
    .vertical-form {
      display: flex;
      flex-direction: column;
      gap: 15px; /* Space between form groups */
    }
    /* Button Group Styles */
    .btn-group {
      display: flex;
      gap: 10px;
      justify-content: center;
      margin-top: 20px;
      flex-wrap: wrap; /* Wrap buttons on smaller screens */
    }
    .btn-group.no-print button { /* Specific styles for buttons in print-hidden groups */
      padding: 8px 15px;
      font-size: 14px;
      font-weight: bold;
    }
    /* Specific Button Colors */
    .add-entry-btn { background-color: #4CAF50; }
    .add-entry-btn:hover { background-color: #43A047; }
    .add-return-btn { background-color: #F44336; }
    .add-return-btn:hover { background-color: #D32F2F; }
    .pay-amount-btn { background-color: #2196F3; }
    .pay-amount-btn:hover { background-color: #1976D2; }
    .view-payment-details-btn { background-color: #9C27B0; }
    .view-payment-details-btn:hover { background-color: #7B1FA2; }
    .pdf-download-btn { background-color: #607D8B; }
    .pdf-download-btn:hover { background-color: #455A64; }
    .pay-commission-btn { background-color: #FF9800; } /* Orange for commission */
    .pay-commission-btn:hover { background-color: #FB8C00; }

    /* --- Profile Info Display --- */
    .profile-info {
      display: flex;
      gap: 15px;
      justify-content: center;
      font-size: 14px;
      margin-top: 15px;
      margin-bottom: 15px;
      flex-wrap: wrap;
      text-align: center;
      padding: 10px;
      background-color: #e3f2fd; /* Light blue background */
      border-radius: 4px;
    }
    .profile-info span { /* Label part */
      font-weight: normal;
      color: #555;
    }
    .profile-info span span { /* Value part */
      font-weight: bold;
      color: #333;
      margin-left: 5px;
    }

    /* --- Orders Container Styling --- */
    .orders-container {
      margin-bottom: 40px;
      padding: 20px;
      border-radius: 8px;
      border: 1px solid #ccc; /* Default border */
    }
    #company-orders-container { background-color: #E3F2FD; border-color: #90CAF9; }
    #contractor-orders-container { background-color: #E8F5E9; border-color: #A5D6A7; }

    #company-order-header,
    #contractor-order-header {
      text-align: center;
      margin-bottom: 20px;
      padding-bottom: 15px;
      border-bottom: 1px solid #ccc;
    }
    #company-order-header h2, /* Main title within order section (e.g., Company View) */
    #contractor-order-header h2#contractor-title { /* Main title within order section (e.g., Contractor View) */
      margin: 0 0 5px 0;
      font-size: 24px;
      color: #1E88E5;
      cursor: pointer; /* For editing */
    }

    #company-order-header h3.contractor-subtitle-display, /* Company View's "Mirzapur" subtitle */
    #contractor-order-header h3#contractor-subtitle { /* Contractor View's "Mirzapur" subtitle */
      margin: 5px 0 15px 0;
      font-size: 18px;
      color: #555;
      font-weight: normal;
      cursor: pointer; /* For editing */
    }
    /* Specific style for subtitle in company view */
    #company-order-header h3.contractor-subtitle-display {
      color: #1b5e20; /* Green color */
      font-size: 16px;
      margin-bottom: 10px;
    }
    /* Sub-headers within sections (like "Order Issue", "Carpet Bajar Report") */
    #order-output-section h3:not(.contractor-subtitle-display):not(#contractor-subtitle) { /* Target specific H3s */
      font-size: 16px;
      margin-top: 25px;
      margin-bottom: 10px;
      color: #444;
      border-bottom: 1px dashed #ccc;
      padding-bottom: 5px;
    }
    /* Target the "Company Orders" / "Contractor Orders" subtitles */
    #company-order-header h3:not(.contractor-subtitle-display),
    #contractor-order-header h3:not(#contractor-subtitle) {
        margin: 15px 0 10px 0;
        font-size: 20px; /* Make it a bit more prominent */
        color: #333;
        font-weight: bold;
    }


    /* --- Stock Issue Tables Styling --- */
    .stock-issue-container {
      display: flex;
      flex-direction: row; /* Side by side for all screens */
      justify-content: flex-start; /* Align items to the start for scrolling */
      gap: 10px;
      margin-top: 20px;
      overflow-x: auto; /* Enable horizontal scroll for all screens */
      -webkit-overflow-scrolling: touch;
      padding: 10px;
      background: #f9f9f9;
      border: 1px solid #eee;
      border-radius: 4px;
      /* white-space: nowrap; /* Could be added if flex-shrink fails on some browsers */
    }
    .stock-issue-container > div { /* Each box (Received, Deliver, Balance) */
      border: 1px solid #ddd;
      padding: 10px;
      background: #fff;
      border-radius: 4px;
      min-width: 200px; /* Minimum width for each box, consistent across screens */
      flex-shrink: 0; /* Prevent shrinking, enables horizontal scroll */
      text-align: center;
      vertical-align: top;
    }
    /* Specific tables within stock container */
    #company-received-table, #company-deliver-table, #company-balance-table,
    #contractor-received-table, #contractor-deliver-table, #contractor-balance-table {
      width: auto; /* Auto width based on content */
      min-width: 150px; /* Minimum width */
      font-size: 11px; /* Smaller font */
      border-collapse: collapse;
      margin: 0 auto; /* Center table within its div */
    }
    /* Cells within stock tables */
    #company-received-table th, #company-received-table td,
    #company-deliver-table th, #company-deliver-table td,
    #company-balance-table th, #company-balance-table td,
    #contractor-received-table th, #contractor-received-table td,
    #contractor-deliver-table th, #contractor-deliver-table td,
    #contractor-balance-table th, #contractor-balance-table td {
      padding: 5px;
      border: 1px solid #ddd;
      white-space: nowrap; /* Prevent text wrapping */
      text-align: right; /* Right-align numbers */
    }
    /* First column (Size label) left-aligned */
    #company-received-table td:first-child, #company-deliver-table td:first-child,
    #company-balance-table td:first-child, #contractor-received-table td:first-child,
    #contractor-deliver-table td:first-child, #contractor-balance-table td:first-child,
    #company-received-table th:first-child, #company-deliver-table th:first-child,
    #company-balance-table th:first-child, #contractor-received-table th:first-child,
    #contractor-deliver-table th:first-child, #contractor-balance-table th:first-child {
      text-align: left;
    }
    /* Header cells in stock tables */
    #company-received-table th, #company-deliver-table th, #company-balance-table th,
    #contractor-received-table th, #contractor-deliver-table th, #contractor-balance-table th {
      background-color: #64B5F6; /* Lighter blue */
      color: white;
      font-weight: bold;
      text-align: center; /* Center header text */
    }
    /* Footer cells in stock tables */
    #company-received-table tfoot td, #company-deliver-table tfoot td,
    #company-balance-table tfoot td, #contractor-received-table tfoot td,
    #contractor-deliver-table tfoot td, #contractor-balance-table tfoot td {
      font-weight: bold;
      background-color: #f0f0f0; /* Light grey footer */
    }
    /* Footer first cell (label like "Total Peace") right-aligned */
    #company-received-table tfoot td:first-child, #company-deliver-table tfoot td:first-child,
    #company-balance-table tfoot td:first-child, #contractor-received-table tfoot td:first-child,
    #contractor-deliver-table tfoot td:first-child, #contractor-balance-table tfoot td:first-child {
      text-align: right;
    }
    .stock-issue-container > div > h4 {
      font-size: 13px;
      margin: 0 0 10px 0;
      text-align: center;
      white-space: nowrap;
      color: #1E88E5;
    }

    /* --- Payment Detail Section Styling --- */
    #payment-detail-section {
      background-color: #FFF9C4; /* Light yellow */
      border: 1px solid #FFF59D;
    }
    #payment-detail-section h2 { /* Main title (MH Qadri...) */
      text-align: center;
      font-size: 22px;
      margin-bottom: 15px;
      color: #1E88E5;
      border-bottom: 2px solid #1E88E5;
      padding-bottom: 10px;
      cursor: pointer; /* Editable */
    }
    #payment-detail-section h3:not(#order-summary h3):not(#payment-summary h3):not(#payment-history h3) { /* Sub-header "Payment Details for ..." */
      text-align: center;
      font-size: 20px;
      margin-top: 0;
      margin-bottom: 20px;
      color: #FBC02D;
      padding-bottom: 5px;
    }
    #order-summary h3, #payment-summary h3, #payment-history h3 {
      text-align: left;
      font-size: 18px;
      margin-top: 10px;
      margin-bottom: 15px;
      color: #795548; /* Brown color */
      border-bottom: 1px dashed #795548;
      padding-bottom: 5px;
    }

    #order-summary, #payment-summary {
      text-align: left;
      font-size: 14px;
      margin-bottom: 20px;
      padding: 15px;
      background-color: #fff;
      border-radius: 4px;
      border: 1px solid #eee;
    }
    #order-summary p, #payment-summary p {
      margin: 8px 0;
      line-height: 1.6;
      color: #444;
    }
    #order-summary p span, #payment-summary p span {
      font-weight: bold;
      margin-left: 5px;
      color: #000;
    }
    #payment-history {
      padding: 0;
      border: none;
      background: none;
      margin-bottom: 20px;
    }
    #payment-history-table {
      min-width: 100%;
      margin-top: 10px;
    }
    #payment-history-table thead {
      background-color: #A1887F; /* Brown header */
      color: white;
    }

    /* --- Pay Amount Section Styling --- */
    #pay-amount-section {
      background-color: #C8E6C9; /* Light green */
      border: 1px solid #A5D6A7;
    }
    #pay-amount-section h2 {
      color: #388E3C; /* Dark green */
      border-bottom-color: #388E3C;
    }
    #pay-amount-summary {
      background-color: #e8f5e9;
      border: 1px solid #c8e6c9;
      border-radius: 4px;
      padding: 15px;
      margin-bottom: 20px;
      font-size: 15px;
    }
    #pay-amount-summary p {
      margin: 8px 0;
      color: #333;
    }
    #pay-amount-summary p span {
      font-weight: bold;
      color: #1b5e20;
      margin-left: 5px;
    }

    /* --- Row Editing --- */
    tr.editing td {
      padding: 2px;
      background-color: #fffde7;
    }
    tr.editing input[type="text"],
    tr.editing input[type="number"],
    tr.editing input[type="date"],
    tr.editing select,
    tr.editing textarea { /* Added textarea */
      padding: 6px 8px;
      font-size: 13px;
      margin: 0;
      border-radius: 2px;
      border: 1px solid #ccc;
      box-sizing: border-box;
      width: 100%;
      font-family: Arial, sans-serif; /* Ensure consistency */
    }
     tr.editing input:focus, tr.editing select:focus, tr.editing textarea:focus { /* Added textarea */
         border-color: #2196F3;
         outline: none;
     }
    tr.editing button {
      padding: 4px 8px;
      font-size: 12px;
      margin: 1px;
    }
     .save-btn { background-color: #4CAF50; }
     .save-btn:hover { background-color: #43A047; }
     .cancel-btn { background-color: #f44336; }
     .cancel-btn:hover { background-color: #d32f2f; }
     .edit-btn { background-color: #FFC107; color: #333; }
     .edit-btn:hover { background-color: #FFA000; }
     .delete-btn { background-color: #F44336; }
     .delete-btn:hover { background-color: #D32F2F; }

    /* --- Print styles --- */
    @media print {
      body {
        padding-top: 0;
        padding-bottom: 0;
        background-color: #fff !important;
        color: #000 !important;
        font-size: 10pt;
      }
      header, footer#footer, #sidebar, #overlay, #profile-buttons-container, #login-page, .no-print, #login-footer,
      #company-profile-section, #contractor-profile-section, #order-entry-section, #pay-amount-section, #change-password-section
       {
        display: none !important;
      }
      main {
        margin-top: 0 !important;
        padding: 5px;
      }
      section, .orders-container, #payment-detail-section {
        box-shadow: none !important;
        border: none !important;
        margin-bottom: 15px;
        padding: 10px;
        background-color: #fff !important;
        display: block !important;
        page-break-inside: avoid;
      }
      table {
        min-width: 100%;
        box-shadow: none;
        border: 1px solid #000 !important;
        font-size: 9pt;
        table-layout: auto;
        width: 100%;
        page-break-inside: auto;
      }
      th, td {
        padding: 4px;
        font-size: 8pt;
        border: 1px solid #ccc !important;
        word-wrap: break-word;
        overflow: visible;
      }
      th {
        background-color: #eee !important;
        color: #000 !important;
        font-weight: bold;
      }
      tbody tr {
         page-break-inside: avoid;
      }
      th.print-hidden, td.print-hidden {
        display: none !important;
      }
      .stock-issue-container {
        page-break-inside: avoid;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 5px;
        border: 1px solid #ccc;
        padding: 5px;
        margin-top: 15px;
      }
      .stock-issue-container > div {
        break-inside: avoid;
        border: 1px solid #ccc;
        padding: 5px;
        margin: 5px;
        min-width: 160px;
      }
      .stock-issue-container > div > h4 { font-size: 10pt; margin: 0 0 5px 0; }
      .stock-issue-container table { width: 100%; min-width: auto; font-size: 8pt; margin: 0; border: none !important; }
      .stock-issue-container th, .stock-issue-container td { padding: 2px; font-size: 7pt; border: 1px solid #eee !important; }
      .address-details { font-size: 8pt; margin-top: 15px; white-space: pre-line !important; }
      #payment-detail-section h2,
      #payment-detail-section h3:not(#order-summary h3):not(#payment-summary h3):not(#payment-history h3),
      #payment-detail-section p, #payment-detail-section span {
        font-size: 10pt !important;
      }
      #order-summary h3, #payment-summary h3, #payment-history h3 {
         font-size: 11pt !important;
      }
      #payment-history-table { font-size: 9pt; }
      #payment-history-table th, #payment-history-table td { padding: 3px; font-size: 8pt; }
      a { text-decoration: none; color: #000 !important; }
      .profile-info {
        font-size: 10pt;
        background-color: #fff !important;
        display: flex !important;
        justify-content: center;
        gap: 10px;
        margin-bottom: 15px;
        padding: 5px;
        border: 1px solid #eee;
      }
      .profile-info span, .profile-info span span { font-size: 9pt !important; }
      #company-order-header h2, #contractor-order-header h2#contractor-title { font-size: 16pt; margin-bottom: 5px; }
      #company-order-header h3, #contractor-order-header h3#contractor-subtitle { font-size: 12pt; margin-top: 5px; margin-bottom: 15px; }
      #payment-detail-section { page-break-before: always; }
      #order-summary, #payment-summary { margin-bottom: 15px; padding: 10px; border: 1px solid #eee; }
      #order-summary p, #payment-summary p { margin: 5px 0; font-size: 10pt; }
      #payment-history { margin-bottom: 15px; }
    }

    /* --- Responsive adjustments (General) --- */
    @media (max-width: 768px) {
      body { padding-top: 60px; padding-bottom: 40px; }
      header h1 { font-size: 16px; }
      #sidebar-toggle { font-size: 20px; padding: 0 5px; }
      main { padding: 10px; margin-top: 120px; }
      section { padding: 15px; }
      .profile-info { font-size: 12px; gap: 10px; }
      th, td { padding: 8px; font-size: 12px; }
      button { padding: 8px 15px; font-size: 14px; }
      .btn-group.no-print button { padding: 6px 12px; font-size: 12px; }
      .fixed-btn { padding: 6px 10px; font-size: 12px; }
      #company-profile-buttons button, #contractor-buttons-container button { padding: 5px 10px; font-size: 11px; }
      
      /* Stock boxes horizontal scroll on small screens */
      .stock-issue-container {
        /* flex-direction: row; /* Ensure it's row from base style */
        /* overflow-x: auto; /* Ensure it's auto from base style */
      }
      .stock-issue-container > div {
        min-width: 180px; /* Or 200px, adjust for content, overrides base if needed but should match */
        /* flex-shrink: 0; /* Ensure it's 0 from base style */
      }
      .stock-issue-container > div > h4 { font-size: 12px; }
      .stock-issue-container table { min-width: auto; } /* Allows table to be as small as content needs */
      .stock-issue-container th, .stock-issue-container td { padding: 4px; font-size: 10px; }

      .address-details { font-size: 9px; }
      #payment-detail-section h2 { font-size: 18px; }
      #payment-detail-section h3 { font-size: 14px; }
      #payment-detail-section p { font-size: 12px; }
      #payment-history-table th, #payment-history-table td { font-size: 11px; padding: 5px; }
      #pay-amount-section h2 { font-size: 16px; }
      #pay-amount-section input, #pay-amount-section select { font-size: 14px; }
      #pay-amount-section button { font-size: 14px; padding: 8px 16px; }
      .display-info p { font-size: 14px; }
      table { min-width: 400px; }
    }
    /* Utility Classes */
    .hidden { display: none !important; }
  </style>
</head>
<body>
  <header>
    <img id="logo" src="" alt="Logo">
    <h1 id="main-header-title" ondblclick="editTitle(this, 'main_header_title')">MH Qadri Export Rugs</h1>
    <button id="sidebar-toggle">☰</button>
  </header>

  <div id="sidebar">
    <button onclick="document.getElementById('logo-upload').click()">Upload Logo</button>
    <input type="file" id="logo-upload" accept="image/*" style="display: none;" onchange="uploadAppFile('logo', this.files[0])">
    <button onclick="triggerElementEdit('main-header-title', 'main_header_title')">Edit App Main Title</button>
    <button onclick="triggerElementEditFirstOfClass('.js-app-address-display', 'app_address_details_text')">Edit Address/Proprietor</button>
    <button id="change-password-btn">Change Password</button>
    <button id="logout-btn">Logout</button>
    <button id="backup-data-btn" onclick="backupData()">Backup Data</button>
    <button onclick="document.getElementById('restore-file').click()">Restore Data</button>
    <input type="file" id="restore-file" accept=".json" style="display: none;" onchange="restoreBackup(this)">
    <div class="sidebar-spacer"></div>
    <button id="close-sidebar-btn" onclick="closeSidebar()">Back</button>
  </div>

  <div id="overlay" onclick="closeSidebar()"></div>

  <div id="login-page" style="display: flex;">
    <div class="login-container">
      <div class="login-box">
        <h2>Login</h2>
        <form id="login-form">
          <div class="form-group">
            <label for="user-id">User ID</label>
            <input type="text" id="user-id" required>
          </div>
          <div class="form-group">
            <label for="password">Password</label>
            <input type="password" id="password" required>
          </div>
          <button type="submit">Login</button>
        </form>
      </div>
      <div class="description-box">
        <div id="description">
          <p>MH Kadari Export Rags is a leading manufacturer and exporter of high-quality carpets, Dari, and handmade Turkish knot carpets. We offer premium designs, vibrant color combinations, and various sizes to suit any space. With a commitment to quality and craftsmanship, we provide durable, elegant, and competitively priced flooring solutions. Choose us for style, quality, and excellence!</p>
        </div>
      </div>
    </div>
    <footer id="login-footer">
      <p>MH Qadri Export Rugs © 2023</p>
    </footer>
  </div>

  <div id="profile-buttons-container" style="display: none;">
    <div id="profile-action-buttons">
      <button id="company-fixed-btn" class="fixed-btn" onclick="showCompanyProfileSection()">Add Company</button>
      <button id="contractor-fixed-btn" class="fixed-btn" onclick="showContractorProfileSection()">Add Contractor</button>
    </div>
    <div id="company-profile-buttons"></div>
    <div id="contractor-buttons-container"></div>
  </div>

  <main id="main-content" style="display: none;">
    <!-- Change Password Section -->
    <section id="change-password-section">
      <h2>Change Password</h2>
      <form id="change-password-form" class="vertical-form">
        <div class="form-group">
          <label for="change-user-id">User ID</label>
          <input type="text" id="change-user-id" required>
        </div>
        <div class="form-group">
          <label for="current-password">Current Password</label>
          <input type="password" id="current-password" required>
        </div>
        <div class="form-group">
          <label for="new-password">New Password</label>
          <input type="password" id="new-password" required minlength="4">
        </div>
        <div class="btn-group">
          <button type="submit">Change Password</button>
          <button type="button" onclick="cancelChangePassword()">Cancel</button>
        </div>
      </form>
    </section>

    <!-- Company Profile Section -->
    <section id="company-profile-section">
      <h2>Company Profile</h2>
      <form id="company-profile-form" class="vertical-form">
        <div class="form-group">
          <label for="company-name-input">Name*</label>
          <input type="text" id="company-name-input" required>
        </div>
        <div class="form-group">
          <label for="company-mobile-input">Mobile</label>
          <input type="text" id="company-mobile-input">
        </div>
        <div class="form-group">
          <label for="company-address-input">Address</label>
          <input type="text" id="company-address-input">
        </div>
        <div class="btn-group">
          <button type="button" onclick="saveCompanyProfile()">Save Company Profile</button>
          <button type="button" onclick="hideAllSectionsAndShowOutput()">Cancel</button>
        </div>
      </form>
    </section>

    <!-- Contractor Profile Section -->
    <section id="contractor-profile-section">
      <h2>Contractor Profile</h2>
      <form id="contractor-profile-form" class="vertical-form">
        <div class="form-group">
          <label for="contractor-name-input">Name*</label>
          <input type="text" id="contractor-name-input" required>
        </div>
        <div class="form-group">
          <label for="contractor-mobile-input">Mobile</label>
          <input type="text" id="contractor-mobile-input">
        </div>
        <div class="form-group">
          <label for="contractor-address-input">Address</label>
          <input type="text" id="contractor-address-input">
        </div>
        <div class="btn-group">
          <button type="button" onclick="saveContractorProfile()">Save Contractor Profile</button>
          <button type="button" onclick="hideAllSectionsAndShowOutput()">Cancel</button>
        </div>
      </form>
    </section>

    <!-- Order Entry Section -->
    <section id="order-entry-section">
      <h2><span id="current-order-type-label"></span> Entry Form</h2>
      <form id="order-entry-form" class="vertical-form">
        <input type="hidden" id="is-return-input" name="isReturn" value="false">
        <div class="form-group" id="company-select-group" style="display: none;">
          <label id="company-select-label" for="company-select-input">Select Company*</label>
          <select id="company-select-input" name="company-select" required></select>
        </div>
        <div class="form-group">
          <label id="date-label" for="order-date-input">Date*</label>
          <input type="date" id="order-date-input" name="date" required>
        </div>
        <div class="form-group">
          <label id="size-label" for="order-size-input">Size (e.g., 9×12)*</label>
          <input type="text" id="order-size-input" name="size" required pattern="^[\d.\s]+([×x*])[\d.\s]+$" title="Use format W×H e.g., 9×12 or 2.6×9">
        </div>
        <div class="form-group">
          <label id="peace-label" for="order-peace-input">Peace</label>
          <input type="number" id="order-peace-input" name="peace" step="any">
        </div>
        <div class="form-group">
          <label id="kati-label" for="order-kati-input">Kati</label>
          <input type="number" id="order-kati-input" name="kati" step="any">
        </div>
        <div class="form-group" id="tana-group">
          <label id="tana-label" for="order-tana-input">Tana</label>
          <input type="number" id="order-tana-input" name="tana" step="any">
        </div>
        <div class="form-group" id="material-jana-group" style="display: none;">
          <label id="material-jana-label" for="order-material-jana-input">Material Jana</label>
          <input type="number" id="order-material-jana-input" name="material-jana" step="any">
        </div>
        <div class="form-group">
          <label id="rate-label" for="order-rate-input">Rate</label>
          <input type="number" id="order-rate-input" name="rate" step="any">
        </div>
        <!-- NEW: Cmsn Rate Input -->
        <div class="form-group">
          <label for="order-cmsn-rate-input">Cmsn Rate</label>
          <input type="number" id="order-cmsn-rate-input" name="cmsnRate" step="any" placeholder="e.g. 2, 5.5">
        </div>
        <div class="form-group" id="description-group">
          <label id="description-label" for="order-description-input">Description</label>
          <input type="text" id="order-description-input" name="description">
        </div>
        <div id="additional-fields"></div>
        <div class="btn-group">
          <button type="submit">Submit Entry</button>
          <button type="button" onclick="cancelToOrders()">Cancel</button>
        </div>
      </form>
    </section>

    <!-- Order Output Section (Container for Company/Contractor Views) -->
    <section id="order-output-section" style="display: block;">
      <!-- Company Orders View -->
      <div id="company-orders-container" class="orders-container hidden">
        <div id="company-order-header">
          <h2 id="company-main-title" ondblclick="editTitle(this, 'company_order_header_title')">MH Qadri Export Rugs</h2>
          <h3 id="contractor-subtitle-company" class="contractor-subtitle-display" ondblclick="editTitle(this, 'company_view_subtitle')">Mirzapur</h3>
          <div class="profile-info" id="company-profile-info"></div>
          <h3>Company Orders</h3>
          <div class="btn-group no-print">
            <button class="add-entry-btn" onclick="showAddOrderSection('company', false)">Order Entry</button>
            <button class="add-return-btn" onclick="showAddOrderSection('company', true)">Carpet Bajar</button>
            <button class="pay-amount-btn" onclick="showPayAmountSection('company')">Pay Amount</button>
            <button class="view-payment-details-btn" onclick="showPaymentDetailSection('company')">View Payment Details</button>
            <button class="pdf-download-btn" onclick="downloadPDF('company', false)">Download Order PDF</button>
            <button class="pdf-download-btn" onclick="downloadPDF('company', true)">Download Bajar PDF</button>
          </div>
        </div>
        <h3>Order Issue</h3>
        <div class="table-container">
          <table id="company-order-table"><thead></thead><tbody></tbody></table>
        </div>
        <div id="company-return-section" style="display: none;">
          <h3>Carpet Bajar Report</h3>
          <div class="table-container">
            <table id="company-return-table"><thead></thead><tbody></tbody></table>
          </div>
        </div>
        <div class="stock-issue-container">
          <div>
            <h4>Received Order</h4>
            <table id="company-received-table">
              <thead><tr><th>Size</th><th>Peace</th></tr></thead>
              <tbody id="company-received-list"></tbody>
              <tfoot>
                <tr><td>Total Peace</td><td id="company-received-peace">0</td></tr>
                <tr><td>Total Material</td><td id="company-received-material">0</td></tr>
                <tr><td>Final Gaj</td><td id="company-received-finalgaj">0.00</td></tr>
                <tr><td>Total Commission</td><td id="company-received-cmsn">₹ 0</td></tr>
                <tr><td>Binai Amount</td><td id="company-received-binai">₹ 0</td></tr>
              </tfoot>
            </table>
          </div>
          <div>
            <h4>Order Deliver</h4>
            <table id="company-deliver-table">
              <thead><tr><th>Size</th><th>Peace</th></tr></thead>
              <tbody id="company-deliver-list"></tbody>
              <tfoot>
                <tr><td>Total Peace</td><td id="company-deliver-peace">0</td></tr>
                <tr><td>Carpet Weight</td><td id="company-deliver-material">0</td></tr>
                <tr><td>Final Gaj</td><td id="company-deliver-finalgaj">0.00</td></tr>
                <tr><td>Outstanding Commission</td><td id="company-deliver-cmsn">₹ 0</td></tr>
                <tr><td>Remaining Binai</td><td id="company-deliver-binai">₹ 0</td></tr>
              </tfoot>
            </table>
          </div>
          <div>
            <h4>Balance Order</h4>
            <table id="company-balance-table">
              <thead><tr><th>Size</th><th>Peace</th></tr></thead>
              <tbody id="company-balance-list"></tbody>
              <tfoot>
                <tr><td>Total Peace</td><td id="company-balance-peace">0</td></tr>
                <tr><td>Total Material</td><td id="company-balance-material">0</td></tr>
                <tr><td>Final Gaj</td><td id="company-balance-finalgaj">0.00</td></tr>
                <tr><td>Total Commission</td><td id="company-balance-cmsn">₹ 0</td></tr>
                <tr><td>Binai Amount</td><td id="company-balance-binai">₹ 0</td></tr>
              </tfoot>
            </table>
          </div>
        </div>
        <div class="address-details js-app-address-display" ondblclick="editTitle(this, 'app_address_details_text')">
          Address Chhota Mirzapur Mirzapur Uttar Pradesh pin code 231001 Mobile 998445058 Proprietor Mohd Hasan Ansari
        </div>
      </div>

      <!-- Contractor Orders View -->
      <div id="contractor-orders-container" class="orders-container hidden">
        <div id="contractor-order-header">
          <h2 id="contractor-title" ondblclick="editTitle(this, 'contractor_order_header_title')">MH Qadri Export Rugs</h2>
          <h3 id="contractor-subtitle" ondblclick="editTitle(this, 'contractor_view_subtitle')">Mirzapur</h3>
          <div class="profile-info" id="contractor-profile-info"></div>
          <h3>Contractor Orders</h3>
          <div class="btn-group no-print">
            <button class="add-entry-btn" onclick="showAddOrderSection('contractor', false)">Order Entry</button>
            <button class="add-return-btn" onclick="showAddOrderSection('contractor', true)">Carpet Bajar</button>
            <button class="pay-amount-btn" onclick="showPayAmountSection('contractor')">Pay Amount</button>
            <button class="view-payment-details-btn" onclick="showPaymentDetailSection('contractor')">View Payment Details</button>
            <button class="pdf-download-btn" onclick="downloadPDF('contractor', false)">Download Order PDF</button>
            <button class="pdf-download-btn" onclick="downloadPDF('contractor', true)">Download Bajar PDF</button>
          </div>
        </div>
        <h3>Order Issue</h3>
        <div class="table-container">
          <table id="contractor-order-table"><thead></thead><tbody></tbody></table>
        </div>
        <div id="contractor-return-section" style="display: none;">
          <h3>Carpet Bajar Report</h3>
          <div class="table-container">
            <table id="contractor-return-table"><thead></thead><tbody></tbody></table>
          </div>
        </div>
        <div class="stock-issue-container">
          <div>
            <h4>Received Order</h4>
            <table id="contractor-received-table">
              <thead><tr><th>Size</th><th>Peace</th></tr></thead>
              <tbody id="contractor-received-list"></tbody>
              <tfoot>
                <tr><td>Total Peace</td><td id="contractor-received-peace">0</td></tr>
                <tr><td>Total Material</td><td id="contractor-received-material">0</td></tr>
                <tr><td>Final Gaj</td><td id="contractor-received-finalgaj">0.00</td></tr>
                <tr><td>Total Commission</td><td id="contractor-received-cmsn">₹ 0</td></tr>
                <tr><td>Binai Amount</td><td id="contractor-received-binai">₹ 0</td></tr>
              </tfoot>
            </table>
          </div>
          <div>
            <h4>Order Deliver</h4>
            <table id="contractor-deliver-table">
              <thead><tr><th>Size</th><th>Peace</th></tr></thead>
              <tbody id="contractor-deliver-list"></tbody>
              <tfoot>
                <tr><td>Total Peace</td><td id="contractor-deliver-peace">0</td></tr>
                <tr><td>Carpet Weight</td><td id="contractor-deliver-material">0</td></tr>
                <tr><td>Final Gaj</td><td id="contractor-deliver-finalgaj">0.00</td></tr>
                <tr><td>Outstanding Commission</td><td id="contractor-deliver-cmsn">₹ 0</td></tr>
                <tr><td>Remaining Binai</td><td id="contractor-deliver-binai">₹ 0</td></tr>
              </tfoot>
            </table>
          </div>
          <div>
            <h4>Balance Order</h4>
            <table id="contractor-balance-table">
              <thead><tr><th>Size</th><th>Peace</th></tr></thead>
              <tbody id="contractor-balance-list"></tbody>
              <tfoot>
                <tr><td>Total Peace</td><td id="contractor-balance-peace">0</td></tr>
                <tr><td>Total Material</td><td id="contractor-balance-material">0</td></tr>
                <tr><td>Final Gaj</td><td id="contractor-balance-finalgaj">0.00</td></tr>
                <tr><td>Total Commission</td><td id="contractor-balance-cmsn">₹ 0</td></tr>
                <tr><td>Binai Amount</td><td id="contractor-balance-binai">₹ 0</td></tr>
              </tfoot>
            </table>
          </div>
        </div>
        <div class="address-details js-app-address-display" ondblclick="editTitle(this, 'app_address_details_text')">
          Address Chhota Mirzapur Mirzapur Uttar Pradesh pin code 231001 Mobile 998445058 Proprietor Mohd Hasan Ansari
        </div>
      </div>
    </section>

    <!-- Pay Amount Section -->
    <section id="pay-amount-section">
      <h2>Pay Amount to <span id="pay-to-name"></span></h2>
      <div id="pay-amount-summary" class="display-info">
        <p>Last Carpet Bajar Gross Binai: <span id="pay-carpet-bajar-gross-binai">₹ 0</span></p>
        <p>Commission on Last Bajar: <span id="pay-carpet-bajar-commission">₹ 0</span></p>
        <p><b>Total Outstanding Commission (All Deliveries):</b> <span id="pay-total-outstanding-commission">₹ 0</span></p>
        <hr>
        <p style="font-weight:bold;">Total Net Outstanding Amount (Deliveries): <span id="pay-remaining-binai">₹ 0</span></p>
      </div>
      <form id="pay-amount-form" class="vertical-form">
        <div class="form-group">
          <label for="pay-date-input">Date*</label>
          <input type="date" id="pay-date-input" name="date" required>
        </div>
        <div class="form-group">
          <label for="pay-amount-input">Amount* (₹)</label>
          <input type="number" id="pay-amount-input" name="amount" step="any" required min="0.01">
        </div>
        <div class="form-group">
          <label for="pay-mode-select">Payment Mode*</label>
          <select id="pay-mode-select" name="payment-mode" required>
            <option value="">Select Payment Mode</option>
            <option value="cash">Cash</option>
            <option value="check">Check</option>
            <option value="upi">UPI</option>
            <option value="bank-transfer">Bank Transfer</option>
          </select>
        </div>
        <div class="btn-group">
          <button type="submit">Submit Payment</button>
          <button type="button" class="pay-commission-btn" onclick="handlePaymentSubmit(event, true)">Pay Commission Only</button>
          <button type="button" onclick="cancelToOrders()">Cancel</button>
        </div>
      </form>
    </section>

    <!-- Payment Detail Section -->
    <section id="payment-detail-section">
      <h2 id="payment-detail-main-title" ondblclick="editTitle(this, 'payment_detail_header_title')">MH Qadri Export Rugs</h2>
      <h3>Payment Details for <span id="payment-detail-name"></span></h3>
      <div id="order-summary">
        <h3>Order Summary</h3>
        <p>Received Order Final Gaj: <span id="total-received-finalgaj">0.00</span></p>
        <p>Received Order Avg. Rate: <span id="avg-received-rate-display">0.00</span></p>
        <p>Received Order Binai Amount (Gross): <span id="total-received-binai-gross">₹ 0</span></p>
        <p>Total Commission (on Received Orders): <span id="total-commission-on-received">₹ 0</span></p>
        <p style="font-weight: bold; color: #1A237E;">Received Order Binai Amount (Net): <span id="total-received-binai-net">₹ 0</span></p>
        <hr style="border: none; border-top: 1px dashed #ccc; margin: 10px 0;">
        <p>Deliver Order Final Gaj: <span id="total-deliver-finalgaj">0.00</span></p>
        <p>Deliver Order Avg. Rate: <span id="avg-deliver-rate-display-summary">0.00</span></p>
        <p>Deliver Order Binai Amount (Gross): <span id="total-deliver-binai-gross">₹ 0</span></p>
        <p>Outstanding Commission (on Deliver Orders): <span id="total-commission-on-deliver">₹ 0</span></p>
        <p style="font-weight: bold; color: #1A237E;">Deliver Order Binai Amount (Net): <span id="total-deliver-binai-net">₹ 0</span></p>
        <hr style="border: none; border-top: 1px dashed #ccc; margin: 10px 0;">
        <p>Balance Order Final Gaj: <span id="total-balance-finalgaj">0.00</span></p>
        <p>Balance Order Binai Amount (Net): <span id="total-balance-binai">₹ 0</span></p>
      </div>
      <div id="payment-summary">
        <h3>Payment Summary</h3>
        <p>Total Net Deliver Binai Amount: <span id="total-deliver-binai-payment">₹ 0</span></p>
        <p>Total Paid Amount: <span id="total-paid-amount">₹ 0</span></p>
        <p>Total Commission Paid: <span id="total-commission-paid">₹ 0</span></p>
        <p>Outstanding Amount: <span id="outstanding-amount">₹ 0</span></p>
      </div>
      <div id="payment-history">
        <h3>Payment History</h3>
        <div class="table-container">
          <table id="payment-history-table">
            <thead><tr><th>Date</th><th>Amount</th><th>Paid Commission</th><th>Payment Mode</th></tr></thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
      <div class="btn-group no-print">
        <button type="button" onclick="cancelToOrders()">Back</button>
        <button class="pdf-download-btn" onclick="downloadPaymentDetailPDF()">Download PDF</button>
      </div>
      <div class="address-details js-app-address-display" ondblclick="editTitle(this, 'app_address_details_text')">
        Address Chhota Mirzapur Mirzapur Uttar Pradesh pin code 231001 Mobile 998445058 Proprietor Mohd Hasan Ansari
      </div>
    </section>
  </main>

  <footer id="footer" style="display: none;">
    <p>MH Qadri Export Rugs © 2023</p>
  </footer>

  <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-storage.js"></script>
  <script>
    // --- सर्विस वर्कर को रजिस्टर करें ---
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/service-worker.js').then(registration => {
          console.log('ServiceWorker Registration successful with scope: ', registration.scope);
        }, err => {
          console.log('ServiceWorker Registration failed: ', err);
        });
      });
    }

    const firebaseConfig = {
      apiKey: "AIzaSyAnFxvPwiio0dU2PgkM1N-wrzCdUzuttLI",
      authDomain: "mhqadri-app.firebaseapp.com",
      databaseURL: "https://mhqadri-app-default-rtdb.firebaseio.com",
      projectId: "mhqadri-app",
      storageBucket: "mhqadri-app.appspot.com",
      messagingSenderId: "378942013286",
      appId: "1:378942013286:web:2943eeb885ff3ade2992a7"
    };
    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();
    const storage = firebase.storage();

    // --- IndexedDB सेटअप और हेल्पर्स ---
    const DB_NAME = 'MHQadriDB';
    const DB_VERSION = 1;
    const OBJECT_STORES = [
        'companyProfiles', 'contractorProfiles', 'companyOrders', 'contractorOrders', 
        'companyPayments', 'contractorPayments', 'settings', 'users', 'syncQueue'
    ];
    let localDB;

    function initDB() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(DB_NAME, DB_VERSION);
            request.onerror = event => reject("IndexedDB error: " + event.target.errorCode);
            request.onsuccess = event => {
                localDB = event.target.result;
                resolve(localDB);
            };
            request.onupgradeneeded = event => {
                const db = event.target.result;
                OBJECT_STORES.forEach(storeName => {
                    if (!db.objectStoreNames.contains(storeName)) {
                         if(storeName === 'syncQueue'){
                            db.createObjectStore(storeName, { keyPath: 'id', autoIncrement: true });
                         } else {
                            db.createObjectStore(storeName, { keyPath: 'key' });
                         }
                    }
                });
            };
        });
    }

    function saveDataToLocalDB(storeName, key, data) {
        return new Promise((resolve, reject) => {
            if (!localDB) { reject("Local DB not initialized."); return; }
            const transaction = localDB.transaction([storeName], 'readwrite');
            const store = transaction.objectStore(storeName);
            const request = store.put({ key, ...data });
            transaction.oncomplete = () => resolve();
            transaction.onerror = (event) => reject(event.target.error);
        });
    }

    function getAllDataFromLocalDB(storeName) {
        return new Promise((resolve, reject) => {
            if (!localDB) { reject("Local DB not initialized."); return; }
            const transaction = localDB.transaction([storeName], 'readonly');
            const store = transaction.objectStore(storeName);
            const request = store.getAll();
            request.onsuccess = () => {
                const dataObject = {};
                request.result.forEach(item => {
                    dataObject[item.key] = item;
                });
                resolve(dataObject);
            }
            request.onerror = (event) => reject(event.target.error);
        });
    }
    
    function deleteDataFromLocalDB(storeName, key) {
        return new Promise((resolve, reject) => {
            if (!localDB) { reject("Local DB not initialized."); return; }
            const transaction = localDB.transaction([storeName], 'readwrite');
            const store = transaction.objectStore(storeName);
            store.delete(key);
            transaction.oncomplete = () => resolve();
            transaction.onerror = event => reject(event.target.error);
        });
    }

    async function addToSyncQueue(operation, path, payload) {
        const item = { operation, path, payload, timestamp: Date.now() };
        const transaction = localDB.transaction(['syncQueue'], 'readwrite');
        const store = transaction.objectStore('syncQueue');
        store.add(item);
    }
    
    async function processSyncQueue() {
        if (!navigator.onLine) {
            console.log("Offline, skipping sync.");
            return;
        }
        if (!localDB) return;

        console.log("Online, processing sync queue...");
        const transaction = localDB.transaction(['syncQueue'], 'readwrite');
        const store = transaction.objectStore('syncQueue');
        const items = await new Promise(resolve => store.getAll().onsuccess = e => resolve(e.target.result));
        
        if(items.length === 0) {
            console.log("Sync queue is empty.");
            return;
        }

        for (const item of items) {
            try {
                if (item.operation === 'save') {
                    await db.ref(item.path).set(item.payload);
                } else if (item.operation === 'update') {
                    await db.ref(item.path).update(item.payload);
                } else if (item.operation === 'delete') {
                    await db.ref(item.path).remove();
                }
                // सिंक सफल होने पर आइटम हटाएं
                const deleteTransaction = localDB.transaction(['syncQueue'], 'readwrite');
                deleteTransaction.objectStore('syncQueue').delete(item.id);
                console.log(`Synced and removed item ${item.id} from queue.`);
            } catch (error) {
                console.error(`Failed to sync item ${item.id}:`, error);
                // यदि कोई त्रुटि होती है तो लूप को रोक दें ताकि क्रम बना रहे
                break; 
            }
        }
    }
    
    // ऑनलाइन/ऑफलाइन इवेंट्स को सुनें
    window.addEventListener('online', processSyncQueue);


    // --- Global Variables ---
    let companyProfiles = [];
    let contractorProfiles = [];
    let companyOrders = {};
    let contractorOrders = {};
    let companyPayments = {};
    let contractorPayments = {};
    let appSettings = {}; // Will hold settings like titles, logo path, address
    let currentOrderType = "company"; // Context: 'company' or 'contractor'
    let selectedCompanyProfile = null;
    let selectedContractorProfile = null;
    const DEFAULT_ADDRESS_DETAILS = "Address: Chhota Mirzapur, Mirzapur, Uttar Pradesh, PIN: 231001\nMobile: 998445058\nProprietor: Mohd Hasan Ansari";

    // --- Inactivity Logout Variables ---
    let inactivityTimer;
    const INACTIVITY_TIMEOUT = 15 * 60 * 1000; // 15 minutes
    const activityEvents = ['mousemove', 'mousedown', 'keypress', 'scroll', 'touchstart', 'click'];


    // --- DOMContentLoaded Initialization ---
    document.addEventListener("DOMContentLoaded", async function() {
      // पहले IndexedDB शुरू करें
      try {
        await initDB();
      } catch (e) {
        console.error("Could not initialize local database.", e);
        alert("Error: Could not initialize local storage. Offline mode will not be available.");
      }

      // Check login status
      if (localStorage.getItem('loggedIn') === 'true') {
        showMainContent();
      } else {
        showLoginPage();
      }

      // Event listeners for forms and buttons
      document.getElementById('login-form')?.addEventListener('submit', handleLoginSubmit);
      document.getElementById('change-password-form')?.addEventListener('submit', handleChangePasswordSubmit);
      document.getElementById('order-entry-form')?.addEventListener('submit', handleOrderSubmit);
      document.getElementById('pay-amount-form')?.addEventListener('submit', (e) => handlePaymentSubmit(e, false));
      document.getElementById('sidebar-toggle')?.addEventListener('click', toggleSidebar);
      document.getElementById('overlay')?.addEventListener('click', closeSidebar);
      document.getElementById('change-password-btn')?.addEventListener('click', showChangePasswordSection);
      document.getElementById('logout-btn')?.addEventListener('click', logout);

      window.addEventListener('resize', updateLayout);
    });

    // --- Inactivity Logout Functions ---
    function logoutDueToInactivity() {
        if (localStorage.getItem('loggedIn') === 'true') { 
            alert("आपको निष्क्रियता के कारण लॉग आउट कर दिया गया है।"); 
            logout();
        }
    }

    function resetInactivityTimer() {
        if (localStorage.getItem('loggedIn') === 'true') {
            clearTimeout(inactivityTimer);
            inactivityTimer = setTimeout(logoutDueToInactivity, INACTIVITY_TIMEOUT);
        }
    }
    
    function triggerElementEdit(elementId, settingKey) {
        const element = document.getElementById(elementId);
        if (element) {
            editTitle(element, settingKey);
        } else {
            alert(`Element with ID '${elementId}' not found for editing.`);
        }
        closeSidebar();
    }

    function triggerElementEditFirstOfClass(elementClassSelector, settingKey) {
        const element = document.querySelector(elementClassSelector);
        if (element) {
            editTitle(element, settingKey);
        } else {
            alert(`Element with class '${elementClassSelector}' not found for editing.`);
        }
        closeSidebar();
    }

     // --- UI Control Functions ---
    function showLoginPage() {
      document.getElementById('login-page').style.display = 'flex';
      document.getElementById('main-content').style.display = 'none';
      document.getElementById('profile-buttons-container').style.display = 'none';
      document.getElementById('footer').style.display = 'none';
      document.getElementById('sidebar-toggle').style.display = 'none';
      document.getElementById('login-footer').style.display = 'block'; 
      
      clearTimeout(inactivityTimer);
      activityEvents.forEach(event => document.removeEventListener(event, resetInactivityTimer, true));

      updateLayout(); 
    }

    function showMainContent() {
      document.getElementById('login-page').style.display = 'none';
      document.getElementById('main-content').style.display = 'block';
      document.getElementById('profile-buttons-container').style.display = 'flex'; 
      document.getElementById('footer').style.display = 'flex'; 
      document.getElementById('sidebar-toggle').style.display = 'block'; 
      document.getElementById('login-footer').style.display = 'none'; 

      loadInitialData().then(() => {
          hideAllSectionsAndShowOutput(); 
          
          resetInactivityTimer(); 
          activityEvents.forEach(event => document.addEventListener(event, resetInactivityTimer, true));
      });
    }

    function hideAllSections() {
      const sections = document.querySelectorAll('main section');
      sections.forEach(section => {
        if (section.id !== 'order-output-section') {
          section.style.display = 'none';
        }
      });
       document.getElementById('company-orders-container')?.classList.add('hidden');
       document.getElementById('contractor-orders-container')?.classList.add('hidden');
    }

    function hideAllSectionsAndShowOutput() {
        hideAllSections(); 
        const outputSection = document.getElementById('order-output-section');
        if (outputSection) {
            outputSection.style.display = 'block'; 
        }
        selectedCompanyProfile = null;
        selectedContractorProfile = null;
        updateProfileDisplay();
        highlightSelectedButton('company-profile-buttons', null);
        highlightSelectedButton('contractor-buttons-container', null);
        updateLayout();
    }

    function showChangePasswordSection() {
        hideAllSections();
        document.getElementById('change-password-section').style.display = 'block';
        closeSidebar();
        updateLayout();
    }

    function toggleSidebar() {
      document.getElementById('sidebar').classList.toggle('active');
      document.getElementById('overlay').classList.toggle('active');
    }

    function closeSidebar() {
      document.getElementById('sidebar').classList.remove('active');
      document.getElementById('overlay').classList.remove('active');
    }

    function updateLayout() {
        const header = document.querySelector('header');
        const profileButtonsContainer = document.getElementById('profile-buttons-container');
        const main = document.querySelector('main');
        const footer = document.getElementById('footer');
        const loginFooter = document.getElementById('login-footer');
        const loginPage = document.getElementById('login-page');

        if (!main || !header) return; 

        const headerHeight = header.offsetHeight;
        const footerHeight = (footer && footer.style.display !== 'none') ? footer.offsetHeight : 0;
        const loginFooterHeight = (loginFooter && loginFooter.style.display !== 'none') ? loginFooter.offsetHeight : 0;
        const profileButtonsHeight = (profileButtonsContainer && profileButtonsContainer.style.display !== 'none') ? profileButtonsContainer.offsetHeight : 0;

        if (loginPage && loginPage.style.display === 'flex') {
            document.body.style.paddingTop = headerHeight + 'px';
            document.body.style.paddingBottom = loginFooterHeight + 'px';
            main.style.marginTop = '0'; 
        } else if (main.style.display !== 'none') {
            let mainMarginTop = headerHeight;
            if (profileButtonsContainer && profileButtonsContainer.style.display !== 'none') {
                profileButtonsContainer.style.top = headerHeight + 'px'; 
                mainMarginTop += profileButtonsHeight + 10; 
            } else {
                mainMarginTop += 10; 
            }
            main.style.marginTop = mainMarginTop + 'px';

            document.body.style.paddingTop = '0'; 
            document.body.style.paddingBottom = footerHeight + 'px'; 
        } else {
            document.body.style.paddingTop = headerHeight + 'px';
            document.body.style.paddingBottom = footerHeight + 'px';
            main.style.marginTop = (headerHeight + 10) + 'px';
        }
    }
    
    // --- परिवर्तित डेटा हैंडलिंग फ़ंक्शंस ---
    function objectToArray(obj) {
        if (!obj) return [];
        return Object.values(obj);
    }
    
    async function loadInitialData() {
        console.log("Loading initial data...");
        document.body.style.cursor = 'wait';
        try {
            // 1. सबसे पहले लोकल DB से डेटा लोड करें
            const localDataPromises = {
                companyProfiles: getAllDataFromLocalDB('companyProfiles'),
                contractorProfiles: getAllDataFromLocalDB('contractorProfiles'),
                companyOrders: getAllDataFromLocalDB('companyOrders'),
                contractorOrders: getAllDataFromLocalDB('contractorOrders'),
                companyPayments: getAllDataFromLocalDB('companyPayments'),
                contractorPayments: getAllDataFromLocalDB('contractorPayments'),
                settings: getAllDataFromLocalDB('settings')
            };
            const localResults = await Promise.all(Object.values(localDataPromises));
            
            companyProfiles = objectToArray(localResults[0]);
            contractorProfiles = objectToArray(localResults[1]);
            companyOrders = localResults[2];
            contractorOrders = localResults[3];
            companyPayments = localResults[4];
            contractorPayments = localResults[5];
            const settingsObj = localResults[6];
            appSettings = settingsObj['appSettingsKey'] || {}; // सेटिंग्स एक ही ऑब्जेक्ट में सेव होती हैं

            // UI को तुरंत लोकल डेटा से अपडेट करें
            updateProfileButtons();
            updateAppSettingsUI();

            // 2. यदि ऑनलाइन हैं, तो फायरबेस से डेटा फ़ेच करें और सिंक करें
            if (navigator.onLine) {
                console.log("Online. Fetching from Firebase and syncing...");
                await processSyncQueue(); // पहले ऑफलाइन परिवर्तनों को सिंक करें
                
                const snapshot = await db.ref().once('value');
                const firebaseData = snapshot.val() || {};

                // फायरबेस डेटा से लोकल वेरिएबल्स को अपडेट करें
                companyProfiles = Object.values(firebaseData.companyProfiles || {});
                contractorProfiles = Object.values(firebaseData.contractorProfiles || {});
                companyOrders = firebaseData.companyOrders || {};
                contractorOrders = firebaseData.contractorOrders || {};
                companyPayments = firebaseData.companyPayments || {};
                contractorPayments = firebaseData.contractorPayments || {};
                appSettings = firebaseData.settings || {};

                // लोकल IndexedDB को फायरबेस डेटा से अपडेट करें
                await Promise.all([
                    ...companyProfiles.map(p => saveDataToLocalDB('companyProfiles', p.name.replace(/[^a-zA-Z0-9]/g, '_'), p)),
                    ...contractorProfiles.map(p => saveDataToLocalDB('contractorProfiles', p.name.replace(/[^a-zA-Z0-9]/g, '_'), p)),
                    ...Object.entries(companyOrders).map(([key, val]) => saveDataToLocalDB('companyOrders', key, val)),
                    ...Object.entries(contractorOrders).map(([key, val]) => saveDataToLocalDB('contractorOrders', key, val)),
                    ...Object.entries(companyPayments).map(([key, val]) => saveDataToLocalDB('companyPayments', key, val)),
                    ...Object.entries(contractorPayments).map(([key, val]) => saveDataToLocalDB('contractorPayments', key, val)),
                    saveDataToLocalDB('settings', 'appSettingsKey', appSettings)
                ]);

                // UI को ताज़ा डेटा से फिर से अपडेट करें
                updateProfileButtons();
                updateAppSettingsUI();
            }

        } catch (error) {
            console.error('Critical error during data load:', error);
            alert(`A critical error occurred while loading data: ${error.message}`);
        } finally {
            document.body.style.cursor = 'default';
            updateLayout();
        }
    }


    async function saveData(path, data, localStore, localKey) {
        // 1. लोकल DB में सेव करें
        await saveDataToLocalDB(localStore, localKey, data);
        
        // 2. यदि ऑनलाइन हैं तो Firebase में सेव करें, नहीं तो सिंक क्यू में डालें
        if(navigator.onLine){
            try {
                await db.ref(path).set(data);
                await processSyncQueue(); // कनेक्शन है तो बाकी चीजें भी सिंक करें
            } catch (error) {
                 console.error(`Error saving to Firebase, adding to queue:`, error);
                 await addToSyncQueue('save', path, data);
            }
        } else {
            await addToSyncQueue('save', path, data);
        }
    }

    async function updateData(path, data, localStore, localKey, fullLocalData) {
        // 1. लोकल DB में अपडेट करें
        await saveDataToLocalDB(localStore, localKey, fullLocalData);
        
        // 2. यदि ऑनलाइन हैं तो Firebase में अपडेट करें, नहीं तो सिंक क्यू में डालें
        if(navigator.onLine){
            try {
                await db.ref(path).update(data);
                await processSyncQueue();
            } catch(error){
                console.error(`Error updating Firebase, adding to queue:`, error);
                await addToSyncQueue('update', path, data);
            }
        } else {
             await addToSyncQueue('update', path, data);
        }
    }
    
    async function deleteData(path, localStore, localKey) {
        // 1. लोकल DB से हटाएं
        await deleteDataFromLocalDB(localStore, localKey);

        // 2. यदि ऑनलाइन हैं तो Firebase से हटाएं, नहीं तो सिंक क्यू में डालें
        if(navigator.onLine){
             try {
                await db.ref(path).remove();
                await processSyncQueue();
            } catch(error){
                console.error(`Error deleting from Firebase, adding to queue:`, error);
                await addToSyncQueue('delete', path, null);
            }
        } else {
            await addToSyncQueue('delete', path, null);
        }
    }

    // --- Event Handlers ---
    async function handleLoginSubmit(event) {
      event.preventDefault();
      const userId = document.getElementById('user-id').value.trim();
      const password = document.getElementById('password').value;

      if (!userId || !password) {
          alert("Please enter both User ID and Password.");
          return;
      }
      
      let userData;
      // ऑनलाइन होने पर Firebase से जांचें
      if(navigator.onLine){
          userData = await db.ref(`users/${userId}`).once('value').then(snap => snap.val());
          if(userData){
             // लोकल में भी सेव करें
             await saveDataToLocalDB('users', userId, userData);
          }
      } else {
          // ऑफलाइन होने पर लोकल से जांचें
          const allUsers = await getAllDataFromLocalDB('users');
          userData = allUsers[userId];
      }
      
      if (!userData) {
          if (userId === 'admin' && password === 'password123') {
              userData = { password: 'password123' };
              await saveData(`users/${userId}`, userData, 'users', userId);
              alert('Default user created successfully. Logging in...');
          } else {
              alert('Invalid User ID or Password.');
              return;
          }
      }

      if (userData.password === password) {
        localStorage.setItem('loggedIn', 'true');
        localStorage.setItem('userId', userId);
        showMainContent(); 
      } else {
        alert('Invalid User ID or Password.');
        localStorage.removeItem('loggedIn'); 
      }
    }

    async function handleChangePasswordSubmit(event) {
      event.preventDefault();
      const userId = document.getElementById('change-user-id').value.trim();
      const currentPassword = document.getElementById('current-password').value;
      const newPassword = document.getElementById('new-password').value;

      if (!userId || !currentPassword || !newPassword) {
        alert("Please fill all password fields."); return;
      }
      if (newPassword.length < 4) {
        alert("New password must be at least 4 characters long."); return;
      }
       if (newPassword === currentPassword) {
           alert("New password cannot be the same as the current password."); return;
       }

      let userData;
      if(navigator.onLine){
          userData = await db.ref(`users/${userId}`).once('value').then(snap => snap.val());
      } else {
          const allUsers = await getAllDataFromLocalDB('users');
          userData = allUsers[userId];
      }

      if (userData && userData.password === currentPassword) {
        const path = `users/${userId}`;
        const dataToUpdate = { password: newPassword };
        await updateData(path, dataToUpdate, 'users', userId, { key: userId, ...dataToUpdate });
        
        alert('Password changed successfully.');
        document.getElementById('change-password-form').reset();
        hideAllSectionsAndShowOutput(); 
      } else {
        alert('Invalid User ID or Current Password.');
      }
    }

    function logout() {
      if (confirm("Are you sure you want to logout?")) {
        localStorage.removeItem('loggedIn');
        companyProfiles = []; contractorProfiles = []; companyOrders = {}; contractorOrders = {};
        companyPayments = {}; contractorPayments = {}; appSettings = {};
        selectedCompanyProfile = null; selectedContractorProfile = null;
        
        showLoginPage(); 
        closeSidebar();
      }
    }

    function cancelChangePassword() {
      document.getElementById('change-password-form').reset();
      hideAllSectionsAndShowOutput(); 
    }

    // --- Profile Management ---
    function showCompanyProfileSection() {
      hideAllSections();
      document.getElementById('company-profile-section').style.display = 'block';
      document.getElementById('company-profile-form').reset();
      document.getElementById('company-name-input').focus();
      updateLayout();
    }

    function showContractorProfileSection() {
      hideAllSections();
      document.getElementById('contractor-profile-section').style.display = 'block';
      document.getElementById('contractor-profile-form').reset();
      document.getElementById('contractor-name-input').focus();
      updateLayout();
    }

    async function saveCompanyProfile() {
      const nameInput = document.getElementById('company-name-input');
      const name = nameInput.value.trim();
      const mobile = document.getElementById('company-mobile-input').value.trim();
      const address = document.getElementById('company-address-input').value.trim();
      const key = name.replace(/[^a-zA-Z0-9]/g, '_');

      if (!name) { alert("Company name is required."); nameInput.focus(); return; }
      if (companyProfiles.some(p => p.name.toLowerCase() === name.toLowerCase())) {
          alert(`Company "${name}" already exists.`); nameInput.focus(); return;
      }

      const profileData = { name, mobile, address, additional_columns: [] }; 
      const path = `companyProfiles/${key}`;
      
      await saveData(path, profileData, 'companyProfiles', key);
      
      alert(`Company profile "${name}" saved successfully.`);
      await loadInitialData(); 
      hideAllSectionsAndShowOutput(); 
    }

    async function saveContractorProfile() {
      const nameInput = document.getElementById('contractor-name-input');
      const name = nameInput.value.trim();
      const mobile = document.getElementById('contractor-mobile-input').value.trim();
      const address = document.getElementById('contractor-address-input').value.trim();
      const key = name.replace(/[^a-zA-Z0-9]/g, '_');

      if (!name) { alert("Contractor name is required."); nameInput.focus(); return; }
      if (contractorProfiles.some(p => p.name.toLowerCase() === name.toLowerCase())) {
          alert(`Contractor "${name}" already exists.`); nameInput.focus(); return;
      }

      const profileData = { name, mobile, address, additional_columns: [] };
      const path = `contractorProfiles/${key}`;
      
      await saveData(path, profileData, 'contractorProfiles', key);

      alert(`Contractor profile "${name}" saved successfully.`);
      await loadInitialData(); 
      hideAllSectionsAndShowOutput(); 
    }

    function updateProfileButtons() {
        const compContainer = document.getElementById('company-profile-buttons');
        const contrContainer = document.getElementById('contractor-buttons-container');
        if (!compContainer || !contrContainer) return;

        compContainer.innerHTML = ""; 
        contrContainer.innerHTML = ""; 

        const sortedCompanies = [...companyProfiles].sort((a, b) => a.name.localeCompare(b.name));
        const sortedContractors = [...contractorProfiles].sort((a, b) => a.name.localeCompare(b.name));

        sortedCompanies.forEach(profile => {
            const btn = document.createElement("button");
            btn.textContent = profile.name;
            btn.title = `Mobile: ${profile.mobile || 'N/A'}\nAddress: ${profile.address || 'N/A'}`;
            btn.onclick = () => selectCompanyProfile(profile);
            btn.ondblclick = (e) => { 
              e.stopPropagation();
              if (confirm(`Delete company "${profile.name}"?\nThis will permanently remove the profile and all associated orders/payments.\nThis action cannot be undone.`)) {
                deleteProfile('company', profile.name);
              }
            };
            compContainer.appendChild(btn);
        });

        sortedContractors.forEach(profile => {
            const btn = document.createElement("button");
            btn.textContent = profile.name;
            btn.title = `Mobile: ${profile.mobile || 'N/A'}\nAddress: ${profile.address || 'N/A'}`;
            btn.onclick = () => selectContractorProfile(profile);
            btn.ondblclick = (e) => { 
              e.stopPropagation();
              if (confirm(`Delete contractor "${profile.name}"?\nThis will permanently remove the profile and all associated orders/payments.\nThis action cannot be undone.`)) {
                deleteProfile('contractor', profile.name);
              }
            };
            contrContainer.appendChild(btn);
        });

        highlightSelectedButton('company-profile-buttons', selectedCompanyProfile?.name);
        highlightSelectedButton('contractor-buttons-container', selectedContractorProfile?.name);

        updateLayout(); 
    }

    async function deleteProfile(type, name) {
      const key = name.replace(/[^a-zA-Z0-9]/g, '_');
      const profilePath = `${type}Profiles/${key}`;
      const ordersPath = `${type}Orders/${key}`;
      const paymentsPath = `${type}Payments/${key}`;
      
      await deleteData(profilePath, `${type}Profiles`, key);
      await deleteData(ordersPath, `${type}Orders`, key);
      await deleteData(paymentsPath, `${type}Payments`, key);

      alert(`${ucfirst(type)} profile "${name}" and all related data deleted successfully.`);
      await loadInitialData();
      hideAllSectionsAndShowOutput(); 
    }

    function selectCompanyProfile(profile) {
        selectedCompanyProfile = profile;
        selectedContractorProfile = null; 
        showCompanyOrders(); 
        highlightSelectedButton('company-profile-buttons', profile.name); 
        highlightSelectedButton('contractor-buttons-container', null); 
    }

    function selectContractorProfile(profile) {
        selectedContractorProfile = profile;
        selectedCompanyProfile = null; 
        showContractorOrders(); 
        highlightSelectedButton('contractor-buttons-container', profile.name); 
        highlightSelectedButton('company-profile-buttons', null); 
    }

    function highlightSelectedButton(containerId, selectedName) {
        const container = document.getElementById(containerId);
        if (!container) return;
        const buttons = container.querySelectorAll('button');
        buttons.forEach(btn => {
            if (btn.textContent === selectedName) {
                btn.classList.add('selected');
            } else {
                btn.classList.remove('selected');
            }
        });
    }

    // --- Order Management ---
    function showCompanyOrders() {
      if (!selectedCompanyProfile) return;
      hideAllSections(); 
      const container = document.getElementById('company-orders-container');
      const mainOutput = document.getElementById('order-output-section');
       if (!container || !mainOutput) return;

      mainOutput.style.display = 'block'; 
      document.getElementById('contractor-orders-container').classList.add('hidden');
      container.classList.remove('hidden'); 

      currentOrderType = 'company'; 
      updateProfileDisplay(); 
      updateCompanyOrdersTable(); 
      updateCompanyStock(); 
      updateLayout(); 
    }

    function showContractorOrders() {
      if (!selectedContractorProfile) return;
       hideAllSections(); 
       const container = document.getElementById('contractor-orders-container');
       const mainOutput = document.getElementById('order-output-section');
        if (!container || !mainOutput) return;

      mainOutput.style.display = 'block'; 
      document.getElementById('company-orders-container').classList.add('hidden');
      container.classList.remove('hidden'); 

      currentOrderType = 'contractor'; 
      updateProfileDisplay();
      updateContractorOrdersTable();
      updateContractorStock();
      updateLayout();
    }

    function showAddOrderSection(orderType, isReturn = false) {
      const profile = orderType === 'company' ? selectedCompanyProfile : selectedContractorProfile;
      if (!profile) {
        alert(`Please select a ${orderType} profile first.`); return;
      }

      hideAllSections(); 
      currentOrderType = orderType; 

      const formSection = document.getElementById('order-entry-section');
      const form = document.getElementById('order-entry-form');
       if (!formSection || !form) return;

      formSection.style.display = 'block'; 
      form.reset(); 

      const profileTypeName = ucfirst(orderType);
      const actionLabel = isReturn ? "Carpet Bajar Entry" : "Order Entry";
      document.getElementById('current-order-type-label').textContent = `${profileTypeName} (${profile.name}) - ${actionLabel}`;
      document.getElementById('is-return-input').value = isReturn ? 'true' : 'false';

      document.getElementById('kati-label').textContent = isReturn ? "Carpet Weight" : "Kati";
      document.getElementById('tana-group').style.display = isReturn ? 'none' : 'block';
      document.getElementById('material-jana-group').style.display = isReturn ? 'block' : 'none';
      document.getElementById('peace-label').textContent = isReturn ? "Return Peace" : "Order Peace";

      const companySelectGroup = document.getElementById('company-select-group');
      const companySelectInput = document.getElementById('company-select-input');
      const isContractor = (orderType === 'contractor');
      companySelectGroup.style.display = isContractor ? 'block' : 'none';
      companySelectInput.required = isContractor;
      document.getElementById('company-select-label').innerHTML = isContractor ? "Select Company<span style='color:red;'>*</span>" : "Select Company"; 
      if (isContractor) {
         loadCompanySelect(); 
      }

      loadAdditionalFields(); 

      document.getElementById('order-date-input').valueAsDate = new Date();
      document.getElementById('order-date-input').focus();
      updateLayout();
    }

    function loadCompanySelect() {
        const select = document.getElementById('company-select-input');
        if (!select) return;
        select.innerHTML = "<option value=''>-- Select Company --</option>";
        companyProfiles.sort((a, b) => a.name.localeCompare(b.name)).forEach(profile => {
            const option = document.createElement("option");
            option.value = profile.name;
            option.textContent = profile.name;
            select.appendChild(option);
        });
    }

    function loadAdditionalFields() {
        const container = document.getElementById("additional-fields");
        if (!container) return;
        container.innerHTML = ""; 

        const profile = currentOrderType === 'company' ? selectedCompanyProfile : selectedContractorProfile;
        const additionalCols = profile?.additional_columns || [];

        additionalCols.forEach(col => {
            const div = document.createElement("div");
            div.className = "form-group";

            const label = document.createElement("label");
            const cleanColName = col.replace(/[^a-zA-Z0-9-_]/g, ''); 
            label.textContent = col; 
            label.htmlFor = `additional-${cleanColName}`;

            const input = document.createElement("input");
            input.type = "text";
            input.name = col; 
            input.id = `additional-${cleanColName}`;
            input.placeholder = `Enter ${col}`; 

            div.appendChild(label);
            div.appendChild(input);
            container.appendChild(div);
        });
    }

    async function handleOrderSubmit(event) {
        event.preventDefault();
        const form = event.target;
        const formData = new FormData(form);
        const isReturn = document.getElementById('is-return-input').value === 'true';
        const profile = currentOrderType === 'company' ? selectedCompanyProfile : selectedContractorProfile;

        if (!profile) { alert("Error: Profile context lost. Cannot submit."); return; }

        const dateInput = document.getElementById('order-date-input');
        const sizeInput = document.getElementById('order-size-input');
        const peaceInput = document.getElementById('order-peace-input');
        const companySelectInput = document.getElementById('company-select-input'); 

        const orderData = {
            id: Date.now(), 
            date: formData.get('date'), size: formData.get('size')?.trim() || '',
            peace: parseFloat(formData.get('peace')) || 0, kati: parseFloat(formData.get('kati')) || 0,
            tana: parseFloat(formData.get('tana')) || 0,
            materialJana: parseFloat(formData.get('material-jana')) || 0, 
            rate: parseFloat(formData.get('rate')) || 0, 
            cmsnRate: parseFloat(formData.get('cmsnRate')) || 0, 
            cmsnAmount: 0, 
            description: formData.get('description')?.trim() || '',
            isReturn: isReturn, additional: {}, company: null,
            gaj: 0, finalGaj: 0, binaiAmount: 0
        };

        if (!orderData.date) { alert("Date is required."); dateInput.focus(); return; }
        if (!orderData.size) { alert("Size is required."); sizeInput.focus(); return; }
        
        const normalizedSize = orderData.size.replace(/[×x*]/g, 'x');
        const sizeParts = normalizedSize.split('x');

        if (sizeParts.length !== 2) {
            alert("Invalid size format. Use 'Width×Height' (e.g., 9×12 or 2.6×9).");
            sizeInput.focus();
            return;
        }

         if (orderData.peace === 0 && orderData.kati === 0 && orderData.tana === 0 && orderData.materialJana === 0) {
             alert("At least one quantity field (Peace, Kati/Weight, Tana, Material Jana) must have a value.");
             peaceInput.focus(); 
             return;
         }

        if (currentOrderType === 'contractor' && isReturn) { 
            const checkPeace = Math.abs(orderData.peace);
            if (checkPeace > 0) {
                const cleanSize = orderData.size.replace(/\s/g, '').toLowerCase();
                const balanceMap = calculateContractorStockBalanceMap();
                const balanceForSize = balanceMap[cleanSize] || 0;
                if (checkPeace > balanceForSize + 0.001) { 
                    alert(`Return Error (Carpet Bajar): वापसी मात्रा (${formatNumber(checkPeace)}) साइज़ "${orderData.size}" के लिए ठेकेदार के पास उपलब्ध शेष स्टॉक (${formatNumber(balanceForSize)}) से अधिक है। आप इससे ज़्यादा वापस नहीं कर सकते।`);
                    peaceInput.focus(); return;
                }
            }
        } else if (currentOrderType === 'contractor' && !isReturn) { 
             orderData.company = formData.get('company-select'); 
             if (!orderData.company) {
                 alert("Select a company for this contractor order.");
                 companySelectInput.focus(); return;
             }
            const checkPeace = Math.abs(orderData.peace);
             if (checkPeace > 0) {
                const cleanSize = orderData.size.replace(/\s/g, '').toLowerCase(); 
                const availableMap = calculateCompanyAvailableStockMap(orderData.company); 
                const availableForSize = availableMap[cleanSize] || 0;
                if (checkPeace > availableForSize + 0.001) {
                    alert(`Issue Error: Company "${orderData.company}" stock "${formatNumber(availableForSize)}" is insufficient to issue ${formatNumber(checkPeace)} for size "${orderData.size}".`);
                    peaceInput.focus(); return;
                }
             }
        }

        try {
            const widthInches = parseSizeToInches(sizeParts[0].trim());
            const heightInches = parseSizeToInches(sizeParts[1].trim());
            orderData.gaj = (widthInches * heightInches) / 1296;
            orderData.size = `${sizeParts[0].trim()}×${sizeParts[1].trim()}`;

            const absPeace = Math.abs(orderData.peace);
            orderData.finalGaj = orderData.gaj * absPeace;
            orderData.binaiAmount = Math.round(orderData.finalGaj * orderData.rate);
            
            orderData.cmsnAmount = 0;
            if (orderData.cmsnRate > 0 && orderData.finalGaj !== 0) {
                orderData.cmsnAmount = Math.abs(orderData.finalGaj) * orderData.cmsnRate; 
            }

            if (isReturn) {
                orderData.peace = -absPeace;
                orderData.kati = -Math.abs(orderData.kati);
                orderData.tana = 0; 
                orderData.finalGaj = -Math.abs(orderData.finalGaj);
                orderData.binaiAmount = -Math.abs(orderData.binaiAmount);
            } else {
                orderData.peace = absPeace;
                orderData.kati = Math.abs(orderData.kati);
                orderData.materialJana = 0; 
            }
        } catch (e) {
            alert(`Calculation error: ${e.message}. Please check size format.`); return;
        }

        const additionalCols = profile?.additional_columns || [];
        additionalCols.forEach(col => {
            orderData.additional[col] = formData.get(col)?.trim() || "";
        });

        const profileNameKey = profile.name.replace(/[^a-zA-Z0-9]/g, '_');
        const path = `${currentOrderType}Orders/${profileNameKey}/${orderData.id}`;
        
        // लोकल डेटा को अपडेट करें
        const ordersObject = currentOrderType === 'company' ? companyOrders : contractorOrders;
        if (!ordersObject[profileNameKey]) {
            ordersObject[profileNameKey] = {};
        }
        ordersObject[profileNameKey][orderData.id] = orderData;
        
        // लोकल और रिमोट डेटा सेव करें
        await saveData(path, ordersObject[profileNameKey], `${currentOrderType}Orders`, profileNameKey);
        
        alert('Entry saved successfully.');
        form.reset(); 
        cancelToOrders(); 
    }

    function calculateContractorStockBalanceMap() { 
        if (!selectedContractorProfile) return {};
        const profileNameKey = selectedContractorProfile.name.replace(/[^a-zA-Z0-9]/g, '_');
        const ordersForProfile = contractorOrders[profileNameKey] || {};
        const orders = Object.values(ordersForProfile);
        const stockMap = {}; 
        orders.forEach(order => {
            const size = (order.size || 'N/A').replace(/\s/g, '').toLowerCase(); 
            const peace = Number(order.peace) || 0; 
            stockMap[size] = (stockMap[size] || 0) + peace;
        });
        Object.keys(stockMap).forEach(size => { 
            if (Math.abs(stockMap[size]) < 0.001) delete stockMap[size];
        });
        return stockMap;
    }

    function calculateCompanyAvailableStockMap(forCompanyName) { 
        const companyStockMap = {};
        const companyNameKey = forCompanyName.replace(/[^a-zA-Z0-9]/g, '_');

        const companySideOrders = Object.values(companyOrders[companyNameKey] || {});
        companySideOrders.forEach(order => {
            if (!order.isReturn) {
                const size = (order.size || 'N/A').replace(/\s/g, '').toLowerCase(); 
                const peace = Number(order.peace) || 0;
                companyStockMap[size] = (companyStockMap[size] || 0) + peace;
            }
        });

        Object.values(contractorOrders).flatMap(profile => Object.values(profile)).forEach(order => {
            if (order.company === forCompanyName) {
                const size = (order.size || 'N/A').replace(/\s/g, '').toLowerCase();
                if (!order.isReturn) {
                    const peace = Number(order.peace) || 0;
                    companyStockMap[size] = (companyStockMap[size] || 0) - peace;
                } else { // It's a return from a contractor TO this company
                    const peace = Math.abs(Number(order.peace) || 0);
                    companyStockMap[size] = (companyStockMap[size] || 0) + peace;
                }
            }
        });

        Object.keys(companyStockMap).forEach(size => {
            if (companyStockMap[size] < 0.001) delete companyStockMap[size]; 
        });
        return companyStockMap;
    }


    function cancelToOrders() {
      hideAllSections(); 
      const outputSection = document.getElementById('order-output-section');
       if (!outputSection) return;
       outputSection.style.display = 'block'; 

      if (selectedCompanyProfile) {
        showCompanyOrders();
      } else if (selectedContractorProfile) {
        showContractorOrders();
      } else {
        hideAllSectionsAndShowOutput();
      }
      updateLayout();
    }

    // --- Table Updating and Display ---
    function updateProfileDisplay() {
      const compInfo = document.getElementById('company-profile-info');
      const contrInfo = document.getElementById('contractor-profile-info');
      if (!compInfo || !contrInfo) return; 

      if (selectedCompanyProfile) {
         compInfo.innerHTML = `<span>Name: <span>${selectedCompanyProfile.name}</span></span> <span>Mobile: <span>${selectedCompanyProfile.mobile || 'N/A'}</span></span> <span>Address: <span>${selectedCompanyProfile.address || 'N/A'}</span></span>`;
      } else {
         compInfo.innerHTML = `<span>Select a company profile...</span>`; 
      }
      if (selectedContractorProfile) {
         contrInfo.innerHTML = `<span>Name: <span>${selectedContractorProfile.name}</span></span> <span>Mobile: <span>${selectedContractorProfile.mobile || 'N/A'}</span></span> <span>Address: <span>${selectedContractorProfile.address || 'N/A'}</span></span>`;
      } else {
         contrInfo.innerHTML = `<span>Select a contractor profile...</span>`; 
      }
    }

    function updateCompanyOrdersTable() {
      if (!selectedCompanyProfile) return;
      const profileName = selectedCompanyProfile.name;
      const profileNameKey = profileName.replace(/[^a-zA-Z0-9]/g, '_');
      const ordersForProfile = companyOrders[profileNameKey] || {};
      const orders = Object.values(ordersForProfile).sort((a,b) => new Date(b.date) - new Date(a.date) || (b.id - a.id));

      const regularOrders = orders.filter(o => !o.isReturn);
      const returnOrders = orders.filter(o => o.isReturn);

      const regularTable = document.getElementById('company-order-table');
      const returnTable = document.getElementById('company-return-table');
      const returnSection = document.getElementById('company-return-section');
       if (!regularTable || !returnTable || !returnSection) return;

      const baseCols = ["Date", "Size", "Gaj", "Peace", "Final Gaj", "KatiOrWt", "TanaOrMJ", "Rate", "Cmsn Rate", "Cmsn Amt", "Binai Amt", "Net Binai Amt", "Desc"];
      const additionalCols = selectedCompanyProfile.additional_columns || []; 
      const allCols = [...baseCols, ...additionalCols, "Actions"];
      
      populateTableHeader(regularTable.querySelector('thead'), allCols, false);
      populateTableBody(regularTable.querySelector('tbody'), regularOrders, allCols, additionalCols, 'company', false);

      populateTableHeader(returnTable.querySelector('thead'), allCols, true);
      populateTableBody(returnTable.querySelector('tbody'), returnOrders, allCols, additionalCols, 'company', true);

      returnSection.style.display = returnOrders.length > 0 ? 'block' : 'none';
    }

    function updateContractorOrdersTable() {
      if (!selectedContractorProfile) return;
      const profileName = selectedContractorProfile.name;
      const profileNameKey = profileName.replace(/[^a-zA-Z0-9]/g, '_');
      const ordersForProfile = contractorOrders[profileNameKey] || {};
      const orders = Object.values(ordersForProfile).sort((a,b) => new Date(b.date) - new Date(a.date) || (b.id - a.id));

      const regularOrders = orders.filter(o => !o.isReturn);
      const returnOrders = orders.filter(o => o.isReturn);

      const regularTable = document.getElementById('contractor-order-table');
      const returnTable = document.getElementById('contractor-return-table');
      const returnSection = document.getElementById('contractor-return-section');
      if (!regularTable || !returnTable || !returnSection) return;

      const baseCols = ["Date", "Size", "Gaj", "Peace", "Final Gaj", "KatiOrWt", "TanaOrMJ", "Rate", "Cmsn Rate", "Cmsn Amt", "Binai Amt", "Net Binai Amt", "Desc", "Company"];
      const additionalCols = selectedContractorProfile.additional_columns || [];
      const allCols = [...baseCols, ...additionalCols, "Actions"];

      populateTableHeader(regularTable.querySelector('thead'), allCols, false); 
      populateTableBody(regularTable.querySelector('tbody'), regularOrders, allCols, additionalCols, 'contractor', false);

      populateTableHeader(returnTable.querySelector('thead'), allCols, true); 
      populateTableBody(returnTable.querySelector('tbody'), returnOrders, allCols, additionalCols, 'contractor', true);

      returnSection.style.display = returnOrders.length > 0 ? 'block' : 'none';
    }

    function populateTableHeader(thead, allCols, isReturnTable) {
      if (!thead) return;
      thead.innerHTML = ''; 
      const headerRow = thead.insertRow();
      allCols.forEach(colKey => {
        let colText = colKey;
        if (colKey === "KatiOrWt") colText = isReturnTable ? "Weight" : "Kati";
        if (colKey === "TanaOrMJ") colText = isReturnTable ? "Mat. Jana" : "Tana";
        if (colKey === "Net Binai Amt") colText = "Net Binai"; // Shorten for header
        
        const th = document.createElement("th");
        th.textContent = colText;
        th.dataset.columnName = colKey; 
        if (colKey === "Actions") {
          th.classList.add("no-print"); 
        }
        headerRow.appendChild(th);
      });
    }

    function populateTableBody(tbody, orders, allCols, additionalCols, type, isReturnTable) {
        if (!tbody) return;
        tbody.innerHTML = ''; 

        if (!orders || orders.length === 0) {
            const row = tbody.insertRow();
            const cell = row.insertCell();
            cell.colSpan = allCols.length; 
            cell.textContent = 'No entries found.';
            cell.style.textAlign = 'center';
            return;
        }

        orders.forEach(order => {
            const row = tbody.insertRow();
            row.dataset.id = order.id; 
            row.dataset.isReturn = order.isReturn || false;

            const rowDataMap = new Map(); 

            const grossBinaiAbs = Math.abs(order.binaiAmount || 0);
            const cmsnAbs = order.cmsnAmount || 0; // Stored positive
            const netBinaiCalculated = grossBinaiAbs - cmsnAbs;

            rowDataMap.set("Date", formatDateForDisplay(order.date));
            rowDataMap.set("Size", order.size || 'N/A');
            rowDataMap.set("Gaj", formatNumber(order.gaj)); 
            rowDataMap.set("Peace", formatNumber(Math.abs(order.peace))); 
            rowDataMap.set("Final Gaj", formatNumber(Math.abs(order.finalGaj))); 
            rowDataMap.set("Rate", formatNumber(order.rate));
            rowDataMap.set("Cmsn Rate", formatNumber(order.cmsnRate));
            rowDataMap.set("Cmsn Amt", formatBinaiAmount(cmsnAbs)); 
            rowDataMap.set("Binai Amt", formatBinaiAmount(grossBinaiAbs)); 
            rowDataMap.set("Net Binai Amt", formatBinaiAmount(netBinaiCalculated)); // NEW COLUMN
            rowDataMap.set("Desc", order.description || '');
            
            if (isReturnTable) { 
                rowDataMap.set("KatiOrWt", formatNumber(Math.abs(order.kati))); 
                rowDataMap.set("TanaOrMJ", formatNumber(order.materialJana));  
            } else {
                rowDataMap.set("KatiOrWt", formatNumber(order.kati));          
                rowDataMap.set("TanaOrMJ", formatNumber(order.tana));          
            }

            if (type === 'contractor') {
                rowDataMap.set("Company", order.company || ''); 
            }

            additionalCols.forEach(col => {
                rowDataMap.set(col, order.additional?.[col] || "");
            });

            allCols.forEach(colKey => { 
                const cell = row.insertCell();
                cell.dataset.columnName = colKey; 

                if (colKey === "Actions") {
                    cell.classList.add("no-print"); 
                    cell.innerHTML = `<button class="edit-btn" onclick="editRow(this.closest('tr'), '${type}')" title="Edit">✏️</button> <button class="delete-btn" onclick="deleteRow(this.closest('tr'), '${type}')" title="Delete">🗑️</button>`;
                } else {
                    cell.textContent = rowDataMap.get(colKey) ?? '';
                    if (["Gaj", "Peace", "Final Gaj", "KatiOrWt", "TanaOrMJ", "Rate", "Cmsn Rate", "Cmsn Amt", "Binai Amt", "Net Binai Amt"].includes(colKey)) {
                        cell.style.textAlign = "right"; 
                    }
                }
            });

            row.ondblclick = function() {
                if (!this.classList.contains('editing')) { 
                    editRow(this, type);
                }
            };
        });
    }

    // --- Row Editing Functions ---
    function editRow(row, type) {
        if (!row || row.classList.contains('editing')) return; 

        const tbody = row.closest('tbody');
        const currentlyEditing = tbody?.querySelector('tr.editing');
        if (currentlyEditing && currentlyEditing !== row) {
            cancelEdit(currentlyEditing, type); 
        }

        row.classList.add('editing');
        const cells = Array.from(row.cells);
        const orderId = row.dataset.id; 
        const identifier = orderId; 

        const profile = type === 'company' ? selectedCompanyProfile : selectedContractorProfile;
        const profileNameKey = profile.name.replace(/[^a-zA-Z0-9]/g, '_');
        const ordersForProfile = type === 'company' ? companyOrders[profileNameKey] : contractorOrders[profileNameKey];
        
        const order = ordersForProfile[identifier];
        const isReturn = order?.isReturn || row.dataset.isReturn === 'true';

        if (!order) {
            console.error("Order data not found for editing. Identifier:", identifier);
            alert("Error: Original order data not found for edit.");
            row.classList.remove('editing'); 
            if (type === 'company') updateCompanyOrdersTable(); else updateContractorOrdersTable();
            return;
        }

        const getCell = (colKey) => cells.find(cell => cell.dataset.columnName === colKey);

        getCell("Date").innerHTML = `<input type="date" value="${order.date}" required>`;
        getCell("Size").innerHTML = `<input type="text" value="${order.size}" required pattern="^[\\d.\\s]+([×x*])[\d.\\s]+$" title="Use format W×H">`;
        getCell("Peace").innerHTML = `<input type="number" step="any" value="${Math.abs(order.peace)}">`; 
        getCell("Rate").innerHTML = `<input type="number" step="any" value="${order.rate}">`;
        getCell("Cmsn Rate").innerHTML = `<input type="number" step="any" value="${order.cmsnRate || 0}">`; 
        getCell("Desc").innerHTML = `<input type="text" value="${order.description || ''}">`;
        
        const cmsnAmtCell = getCell("Cmsn Amt");
        if (cmsnAmtCell) cmsnAmtCell.innerHTML = formatBinaiAmount(order.cmsnAmount || 0);
        
        const netBinaiAmtCell = getCell("Net Binai Amt"); // NEW: Display only
        if (netBinaiAmtCell) {
            const grossBinaiAbs = Math.abs(order.binaiAmount || 0);
            const cmsnAbs = order.cmsnAmount || 0;
            netBinaiAmtCell.innerHTML = formatBinaiAmount(grossBinaiAbs - cmsnAbs);
        }

        if (isReturn) {
            getCell("KatiOrWt").innerHTML = `<input type="number" step="any" value="${Math.abs(order.kati)}">`; 
            getCell("TanaOrMJ").innerHTML = `<input type="number" step="any" value="${order.materialJana || 0}">`; 
        } else {
            getCell("KatiOrWt").innerHTML = `<input type="number" step="any" value="${order.kati || 0}">`; 
            getCell("TanaOrMJ").innerHTML = `<input type="number" step="any" value="${order.tana || 0}">`; 
        }

        if (type === 'contractor') {
            const companyCell = getCell("Company");
            if (companyCell) {
                const companySelect = document.createElement('select');
                companySelect.required = true;
                companySelect.innerHTML = "<option value=''>-- Select --</option>";
                companyProfiles.sort((a,b)=>a.name.localeCompare(b.name)).forEach(comp => {
                    const option = document.createElement("option");
                    option.value = comp.name; option.textContent = comp.name;
                    if (comp.name === order.company) option.selected = true;
                    companySelect.appendChild(option);
                });
                companyCell.innerHTML = ''; companyCell.appendChild(companySelect);
            }
        }

        const additionalCols = profile?.additional_columns || [];
        additionalCols.forEach(col => {
            const cell = getCell(col);
            if (cell) {
                cell.innerHTML = `<input type="text" value="${order.additional?.[col] || ''}" data-col-name="${col}">`;
            }
        });

        const actionCell = getCell("Actions");
        actionCell.innerHTML = `<button class="save-btn" onclick="saveRow(this.closest('tr'), '${type}')" title="Save">✔️</button> <button class="cancel-btn" onclick="cancelEdit(this.closest('tr'), '${type}')" title="Cancel">❌</button>`;

        getCell("Date")?.querySelector('input')?.focus();
    }

    function cancelEdit(row, type) {
      if (!row || !row.classList.contains('editing')) return;
      row.classList.remove('editing');
      if (type === 'company') {
        updateCompanyOrdersTable();
      } else {
        updateContractorOrdersTable();
      }
       highlightSelectedButton('company-profile-buttons', selectedCompanyProfile?.name);
       highlightSelectedButton('contractor-buttons-container', selectedContractorProfile?.name);
    }

    async function saveRow(saveBtn, type) {
        const row = saveBtn.closest('tr');
        if (!row) return;
        const cells = Array.from(row.cells);
        const orderId = row.dataset.id; 
        const identifier = orderId; 

        const profile = type === 'company' ? selectedCompanyProfile : selectedContractorProfile;
        const isReturn = row.dataset.isReturn === 'true';

        if (!profile) { alert("Profile context lost. Cannot save."); return; }

        const getInputValue = (colKey) => cells.find(c => c.dataset.columnName === colKey)?.querySelector('input, select')?.value;
        const getInput = (colKey) => cells.find(c => c.dataset.columnName === colKey)?.querySelector('input, select');

        const updatedData = {
            id: parseInt(orderId), 
            date: getInputValue("Date"),
            size: getInputValue("Size")?.trim() || '',
            peace: parseFloat(getInputValue("Peace")) || 0, 
            rate: parseFloat(getInputValue("Rate")) || 0,
            cmsnRate: parseFloat(getInputValue("Cmsn Rate")) || 0,
            cmsnAmount: 0, 
            description: getInputValue("Desc")?.trim() || '',
            isReturn: isReturn,
            additional: {},
            kati: 0, tana: 0, materialJana: 0, company: null, gaj: 0, finalGaj: 0, binaiAmount: 0
        };

        if (!updatedData.date) { alert("Date is required."); getInput("Date")?.focus(); return; }
        if (!updatedData.size) { alert("Size is required."); getInput("Size")?.focus(); return; }
        
        const normalizedSize = updatedData.size.replace(/[×x*]/g, 'x');
        const sizeParts = normalizedSize.split('x');

        if (sizeParts.length !== 2) {
            alert("Invalid size format. Use 'Width×Height'."); 
            getInput("Size")?.focus(); 
            return;
        }
        
        let qtyFieldToCheck;
        if (isReturn) {
            updatedData.kati = parseFloat(getInputValue("KatiOrWt")) || 0; 
            updatedData.materialJana = parseFloat(getInputValue("TanaOrMJ")) || 0; 
            qtyFieldToCheck = updatedData.kati === 0 && updatedData.materialJana === 0;
        } else {
            updatedData.kati = parseFloat(getInputValue("KatiOrWt")) || 0; 
            updatedData.tana = parseFloat(getInputValue("TanaOrMJ")) || 0;   
            qtyFieldToCheck = updatedData.kati === 0 && updatedData.tana === 0;
        }
        if (updatedData.peace === 0 && qtyFieldToCheck) {
             alert("At least one quantity field must have a value."); getInput("Peace")?.focus(); return;
        }

        if (type === 'contractor') {
            updatedData.company = getInputValue("Company");
            if (!updatedData.company) {
                alert("Select a company for contractor order."); getInput("Company")?.focus(); return;
            }
            if (isReturn) { 
                const checkPeace = Math.abs(updatedData.peace);
                if (checkPeace > 0) {
                    const cleanSize = updatedData.size.replace(/\s/g, '').toLowerCase();
                    const balanceMap = calculateContractorStockBalanceMapExcludingOrder(identifier);
                    const balanceForSize = balanceMap[cleanSize] || 0;
                    if (checkPeace > balanceForSize + 0.001) {
                        alert(`Update Error (Carpet Bajar): वापसी मात्रा (${formatNumber(checkPeace)}) साइज़ "${updatedData.size}" के लिए ठेकेदार के पास उपलब्ध शेष स्टॉक (${formatNumber(balanceForSize)}, इस एंट्री को छोड़कर) से अधिक है। आप इससे ज़्यादा वापस नहीं कर सकते।`);
                        getInput("Peace")?.focus(); return;
                    }
                }
            } else { 
                 const checkPeace = Math.abs(updatedData.peace);
                 if (checkPeace > 0) {
                     const cleanSize = updatedData.size.replace(/\s/g, '').toLowerCase(); 
                     const availableMap = calculateCompanyAvailableStockMapExcludingOrder(type, identifier, updatedData.company); 
                     const availableForSize = availableMap[cleanSize] || 0;
                     if (checkPeace > availableForSize + 0.001) {
                         alert(`Update Error: Company "${updatedData.company}" stock (${formatNumber(availableForSize)}) is insufficient to issue ${formatNumber(checkPeace)} for size "${updatedData.size}" (excluding this entry).`);
                         getInput("Peace")?.focus(); return;
                     }
                 }
            }
        }

        try {
            const widthInches = parseSizeToInches(sizeParts[0].trim());
            const heightInches = parseSizeToInches(sizeParts[1].trim());
            updatedData.gaj = (widthInches * heightInches) / 1296;
            updatedData.size = `${sizeParts[0].trim()}×${sizeParts[1].trim()}`; 

            const absPeace = Math.abs(updatedData.peace);
            updatedData.finalGaj = updatedData.gaj * absPeace;
            updatedData.binaiAmount = Math.round(updatedData.finalGaj * updatedData.rate);
            
            updatedData.cmsnAmount = 0;
            if (updatedData.cmsnRate > 0 && updatedData.finalGaj !== 0) {
                 updatedData.cmsnAmount = Math.abs(updatedData.finalGaj) * updatedData.cmsnRate; 
            }

            if (isReturn) {
                updatedData.peace = -absPeace;
                updatedData.kati = -Math.abs(updatedData.kati);
                updatedData.tana = 0;
                updatedData.finalGaj = -Math.abs(updatedData.finalGaj);
                updatedData.binaiAmount = -Math.abs(updatedData.binaiAmount);
            } else {
                updatedData.peace = absPeace;
                updatedData.kati = Math.abs(updatedData.kati);
                updatedData.materialJana = 0;
            }
        } catch (e) {
            alert(`Calculation error while saving: ${e.message}. Check size format.`); return;
        }

        const additionalCols = profile?.additional_columns || [];
        additionalCols.forEach(col => {
            const inputElement = row.querySelector(`input[data-col-name="${col}"]`);
            updatedData.additional[col] = inputElement ? inputElement.value.trim() : "";
        });

        const profileNameKey = profile.name.replace(/[^a-zA-Z0-9]/g, '_');
        const path = `${currentOrderType}Orders/${profileNameKey}/${updatedData.id}`;
        
        // लोकल और रिमोट डेटा अपडेट करें
        const ordersObject = type === 'company' ? companyOrders : contractorOrders;
        if (ordersObject[profileNameKey]) {
            ordersObject[profileNameKey][identifier] = updatedData;
            await saveData(path, updatedData, `${currentOrderType}Orders/${profileNameKey}`, identifier);
        }
        
        alert('Entry updated successfully.');
        row.classList.remove('editing'); 

        if (type === 'company') {
            updateCompanyOrdersTable(); updateCompanyStock();
        } else {
            updateContractorOrdersTable(); updateContractorStock();
        }
        highlightSelectedButton('company-profile-buttons', selectedCompanyProfile?.name);
        highlightSelectedButton('contractor-buttons-container', selectedContractorProfile?.name);
    }

    function calculateContractorStockBalanceMapExcludingOrder(orderIdentifier) {
       if (!selectedContractorProfile) return {};
       const profileNameKey = selectedContractorProfile.name.replace(/[^a-zA-Z0-9]/g, '_');
       const ordersForProfile = contractorOrders[profileNameKey] || {};
       const orders = Object.values(ordersForProfile).filter(o => String(o.id) !== String(orderIdentifier));

       const stockMap = {};
       orders.forEach(order => {
           const size = (order.size || 'N/A').replace(/\s/g, '').toLowerCase(); 
           const peace = Number(order.peace) || 0;
           stockMap[size] = (stockMap[size] || 0) + peace;
       });
       Object.keys(stockMap).forEach(size => {
           if (Math.abs(stockMap[size]) < 0.001) delete stockMap[size];
       });
       return stockMap;
    }

    function calculateCompanyAvailableStockMapExcludingOrder(orderType, orderIdentifier, forCompanyName) {
        const companyStockMap = {};
        const companyNameKey = forCompanyName.replace(/[^a-zA-Z0-9]/g, '_');
        
        const companySideOrders = Object.values(companyOrders[companyNameKey] || {});
        companySideOrders.forEach(order => {
            const isExcludedThisOrder = (orderType === 'company' && !order.isReturn && String(order.id) === String(orderIdentifier));
            if (!order.isReturn && !isExcludedThisOrder) {
                const size = (order.size || 'N/A').replace(/\s/g, '').toLowerCase();
                const peace = Number(order.peace) || 0;
                companyStockMap[size] = (companyStockMap[size] || 0) + peace;
            }
        });
        
        Object.values(contractorOrders).flatMap(profile => Object.values(profile)).forEach(order => {
             const isExcludedThisOrder = (orderType === 'contractor' && !order.isReturn && String(order.id) === String(orderIdentifier));
            if (!isExcludedThisOrder && order.company === forCompanyName) {
                const size = (order.size || 'N/A').replace(/\s/g, '').toLowerCase();
                 if (!order.isReturn) {
                    const peace = Number(order.peace) || 0;
                    companyStockMap[size] = (companyStockMap[size] || 0) - peace;
                 } else {
                     const peace = Math.abs(Number(order.peace) || 0);
                     companyStockMap[size] = (companyStockMap[size] || 0) + peace;
                 }
            }
        });

        Object.keys(companyStockMap).forEach(size => {
            if (companyStockMap[size] < 0.001) delete companyStockMap[size];
        });
        return companyStockMap;
    }


    async function deleteRow(row, type) {
        if (!row) return;
        const orderId = row.dataset.id; 
        const identifier = orderId; 

        const profile = type === 'company' ? selectedCompanyProfile : selectedContractorProfile;
        if (!identifier || !profile) { alert("Cannot delete row: Identifier or profile context missing."); return; }
        
        const profileNameKey = profile.name.replace(/[^a-zA-Z0-9]/g, '_');
        const ordersForProfile = (type === 'company' ? companyOrders[profileNameKey] : contractorOrders[profileNameKey]) || {};
        const orderToDelete = ordersForProfile[identifier];

        if (!orderToDelete) { alert("Order data to delete not found."); return; }

        if (type === 'contractor' && !orderToDelete.isReturn) {
            const issueSize = (orderToDelete.size || 'N/A').replace(/\s/g, '').toLowerCase();
            const peaceIssued = Math.abs(Number(orderToDelete.peace) || 0);
            const balanceMapAfterHypotheticalDelete = calculateContractorStockBalanceMapExcludingOrder(identifier);
            const currentBalanceForSize = balanceMapAfterHypotheticalDelete[issueSize] || 0;
            
            if (currentBalanceForSize < 0 && peaceIssued > 0) { 
                 alert(`Delete Error: This 'Order Entry' (Size: "${orderToDelete.size}", Peace: ${formatNumber(peaceIssued)}) cannot be deleted because the contractor has already returned more items of this size than they received (excluding this specific issue). This would create a stock inconsistency.\nAdjust 'Carpet Bajar' entries first.`);
                 return;
            }
        }

        const confirmationMessage = `Are you sure you want to delete this ${orderToDelete.isReturn ? 'Carpet Bajar' : 'Order'} entry?
        \nDate: ${formatDateForDisplay(orderToDelete.date)}
        Size: ${orderToDelete.size}
        Peace: ${formatNumber(Math.abs(orderToDelete.peace))}
        \nThis action cannot be undone.`;

        if (confirm(confirmationMessage)) {
            const path = `${type}Orders/${profileNameKey}/${identifier}`;
            
            // लोकल और रिमोट से हटाएं
            const ordersObject = type === 'company' ? companyOrders : contractorOrders;
            if (ordersObject[profileNameKey] && ordersObject[profileNameKey][identifier]) {
                delete ordersObject[profileNameKey][identifier];
                await deleteData(path, `${type}Orders/${profileNameKey}`, identifier);
            }
            
            alert('Entry deleted successfully.');

            if (type === 'company') {
                updateCompanyOrdersTable(); updateCompanyStock();
            } else {
                updateContractorOrdersTable(); updateContractorStock();
            }
        }
    }

    // --- Stock Calculation and Display ---
    function updateCompanyStock() {
      if (!selectedCompanyProfile) return;
      const profileNameKey = selectedCompanyProfile.name.replace(/[^a-zA-Z0-9]/g, '_');
      const orders = Object.values(companyOrders[profileNameKey] || {});
      calculateAndDisplayStock(orders, 'company');
    }

    function updateContractorStock() {
      if (!selectedContractorProfile) return;
      const profileNameKey = selectedContractorProfile.name.replace(/[^a-zA-Z0-9]/g, '_');
      const orders = Object.values(contractorOrders[profileNameKey] || {});
      calculateAndDisplayStock(orders, 'contractor');
    }

    function calculateAndDisplayStock(orders, type) {
        const receivedMap = {}; 
        const deliverMap = {}; 
        let totalReceivedP = 0, totalReceivedM = 0, totalReceivedFG = 0, totalReceivedB = 0, totalReceivedCmsn = 0;
        let totalDeliverP = 0, totalDeliverM = 0, totalDeliverFG = 0, totalDeliverB_Net = 0, totalDeliverCmsn = 0, totalDeliverGrossB = 0; 

        (orders || []).forEach(o => {
            const size = o.size || 'N/A';
            const normalizedSize = size.replace(/\s/g, '').toLowerCase(); 
            const peace = Number(o.peace) || 0;
            const kati = Number(o.kati) || 0;
            const tana = Number(o.tana) || 0;
            const mj = Number(o.materialJana) || 0;
            const fg = Number(o.finalGaj) || 0; 
            const binai = Number(o.binaiAmount) || 0; 
            const cmsn = Number(o.cmsnAmount) || 0; 

            if (o.isReturn) { 
                const absP = Math.abs(peace);
                const absKati = Math.abs(kati); 
                deliverMap[normalizedSize] = (deliverMap[normalizedSize] || 0) + absP;
                totalDeliverP += absP;
                totalDeliverM += absKati + Math.abs(mj); 
                totalDeliverFG += Math.abs(fg);
                totalDeliverGrossB += Math.abs(binai);
                totalDeliverCmsn += cmsn;
                totalDeliverB_Net += (Math.abs(binai) - cmsn); 
            } else { 
                receivedMap[normalizedSize] = (receivedMap[normalizedSize] || 0) + peace;
                totalReceivedP += peace;
                totalReceivedM += Math.abs(kati) + Math.abs(tana); 
                totalReceivedFG += Math.abs(fg); 
                totalReceivedB += (Math.abs(binai) - cmsn); 
                totalReceivedCmsn += cmsn;
            }
        });

        const balanceMap = {}; 
        const allSizes = new Set([...Object.keys(receivedMap), ...Object.keys(deliverMap)]);
        allSizes.forEach(normSize => {
            const received = receivedMap[normSize] || 0;
            const delivered = deliverMap[normSize] || 0;
            const balance = received - delivered;
            if (Math.abs(balance) > 0.001) balanceMap[normSize] = balance;
        });

        const totalBalanceP = Object.values(balanceMap).reduce((sum, val) => sum + val, 0);
        const totalBalanceM = totalReceivedM - totalDeliverM;
        const totalBalanceFG = totalReceivedFG - totalDeliverFG;
        const totalBalanceB = totalReceivedB - totalDeliverB_Net; 
        const totalBalanceCmsn = totalReceivedCmsn - totalDeliverCmsn;

        const profileName = (type === 'company' ? selectedCompanyProfile?.name : selectedContractorProfile?.name);
        const profileNameKey = profileName.replace(/[^a-zA-Z0-9]/g, '_');
        const payments = Object.values((type === 'company' ? companyPayments[profileNameKey] : contractorPayments[profileNameKey]) || {});

        const totalPaid = payments.reduce((sum, p) => sum + (Number(p.amount) || 0), 0);
        const totalCommissionPaid = payments.reduce((sum, p) => sum + (Number(p.commission_amount) || 0), 0);
        const effectiveCmsnDeliver = totalDeliverCmsn - totalCommissionPaid;
        const remainingBinaiForDeliverSection = Math.max(0, totalDeliverGrossB - totalCommissionPaid - totalPaid); 

        const sizeDisplayMap = orders.reduce((map, o) => {
           const mapKey = o.size.replace(/\s/g, '').toLowerCase();
           if (!map.has(mapKey)) map.set(mapKey, o.size);
           return map;
        }, new Map());

        populateStockTable(document.getElementById(`${type}-received-list`), receivedMap, sizeDisplayMap);
        document.getElementById(`${type}-received-peace`).textContent = formatNumber(totalReceivedP);
        document.getElementById(`${type}-received-material`).textContent = formatNumber(totalReceivedM);
        document.getElementById(`${type}-received-finalgaj`).textContent = formatNumber(totalReceivedFG);
        document.getElementById(`${type}-received-cmsn`).textContent = formatBinaiAmount(totalReceivedCmsn); 
        document.getElementById(`${type}-received-binai`).textContent = formatBinaiAmount(totalReceivedB); 

        populateStockTable(document.getElementById(`${type}-deliver-list`), deliverMap, sizeDisplayMap);
        document.getElementById(`${type}-deliver-peace`).textContent = formatNumber(totalDeliverP);
        document.getElementById(`${type}-deliver-material`).textContent = formatNumber(totalDeliverM);
        document.getElementById(`${type}-deliver-finalgaj`).textContent = formatNumber(totalDeliverFG);
        document.getElementById(`${type}-deliver-cmsn`).textContent = formatBinaiAmount(Math.max(0, effectiveCmsnDeliver)); 
        document.getElementById(`${type}-deliver-binai`).textContent = formatBinaiAmount(remainingBinaiForDeliverSection); 

        populateStockTable(document.getElementById(`${type}-balance-list`), balanceMap, sizeDisplayMap);
        document.getElementById(`${type}-balance-peace`).textContent = formatNumber(totalBalanceP);
        document.getElementById(`${type}-balance-material`).textContent = formatNumber(totalBalanceM);
        document.getElementById(`${type}-balance-finalgaj`).textContent = formatNumber(totalBalanceFG);
        document.getElementById(`${type}-balance-cmsn`).textContent = formatBinaiAmount(totalBalanceCmsn); 
        document.getElementById(`${type}-balance-binai`).textContent = formatBinaiAmount(totalBalanceB); 
    }

    function populateStockTable(tbody, sizePeaceMap, sizeDisplayMap) {
      if (!tbody) return;
      tbody.innerHTML = ""; 

      const sortedNormalizedSizes = Object.keys(sizePeaceMap).sort((normA, normB) => {
         const displayA = sizeDisplayMap.get(normA) || normA; 
         const displayB = sizeDisplayMap.get(normB) || normB;
         const parse = (s) => { 
            const parts = String(s).trim().split(/[×x]/i);
            const parsePart = (p) => {
               if (!p) return NaN; p = p.trim();
               if (!isNaN(p) && !p.includes('.')) return (parseInt(p, 10) || 0) * 12;
               if (p.includes('.')) {
                  const subParts = p.split('.');
                  const feet = parseInt(subParts[0], 10) || 0; const inches = parseInt(subParts[1], 10) || 0;
                  if (isNaN(feet) || isNaN(inches) || inches < 0 || inches > 11) return NaN; return (feet * 12) + inches;
               } return NaN;
            };
            const n1 = parsePart(parts[0]); const n2 = parsePart(parts[1]);
            return [isNaN(n1) ? Infinity : n1, isNaN(n2) ? Infinity : n2, s];
         };
         const [a1, a2, aS] = parse(displayA); const [b1, b2, bS] = parse(displayB);
         if (a1 !== b1) return a1 - b1; if (a2 !== b2) return a2 - b2; return aS.localeCompare(bS);
      });

      sortedNormalizedSizes.forEach(normSize => {
          if (Math.abs(sizePeaceMap[normSize]) > 0.001) {
              const tr = tbody.insertRow();
              tr.insertCell().textContent = sizeDisplayMap.get(normSize) || normSize;
              tr.insertCell().textContent = formatNumber(sizePeaceMap[normSize]); 
          }
      });
    }

    // --- Payment Management ---
    function calculateAverageRate(orders, filterFn) {
        const relevantOrders = (orders || [])
            .filter(filterFn) 
            .filter(o => o.rate && Number(o.rate) > 0); 

        if (relevantOrders.length === 0) return 0;

        const sumOfWeightedRates = relevantOrders.reduce((sum, o) => {
            const finalGaj = Math.abs(Number(o.finalGaj) || 0);
            const rate = Number(o.rate);
            return sum + (finalGaj * rate);
        }, 0);

        const totalFinalGaj = relevantOrders.reduce((sum, o) => {
            return sum + Math.abs(Number(o.finalGaj) || 0);
        }, 0);

        if (totalFinalGaj === 0) return 0; 

        return sumOfWeightedRates / totalFinalGaj;
    }

    function showPayAmountSection(type) {
      const profile = (type === "company") ? selectedCompanyProfile : selectedContractorProfile;
      if (!profile) { alert(`Please select a ${type} profile first.`); return; }

      hideAllSections();
      document.getElementById('pay-amount-section').style.display = 'block';
      currentOrderType = type; 

      const form = document.getElementById('pay-amount-form');
      if (!form) return;
      form.reset(); 

      document.getElementById('pay-to-name').textContent = profile.name;
      
      const profileNameKey = profile.name.replace(/[^a-zA-Z0-9]/g, '_');
      const orders = Object.values((type === "company" ? companyOrders[profileNameKey] : contractorOrders[profileNameKey]) || {});
      const payments = Object.values((type === "company" ? companyPayments[profileNameKey] : contractorPayments[profileNameKey]) || {});

      const returnOrders = orders.filter(o => o.isReturn).sort((a, b) => new Date(b.date) - new Date(a.date) || (b.id - a.id));
      const latestReturnOrder = returnOrders.length > 0 ? returnOrders[0] : null;
      
      let lastReturnGrossBinai = 0, lastReturnCommission = 0;
      let totalNetDeliverBinaiAll = 0, totalDeliverCmsnAll = 0, totalDeliverGrossBAll = 0;

      if (latestReturnOrder) {
        lastReturnGrossBinai = Math.abs(latestReturnOrder.binaiAmount || 0);
        lastReturnCommission = latestReturnOrder.cmsnAmount || 0; 
      }
      
      orders.forEach(o => {
          if (o.isReturn) {
              const grossBinai = Math.abs(o.binaiAmount || 0);
              const commission = o.cmsnAmount || 0;
              totalDeliverGrossBAll += grossBinai;
              totalNetDeliverBinaiAll += (grossBinai - commission);
              totalDeliverCmsnAll += commission;
          }
      });

      const totalPaid = payments.reduce((sum, p) => sum + (Number(p.amount) || 0), 0);
      const totalCommissionPaid = payments.reduce((sum, p) => sum + (Number(p.commission_amount) || 0), 0);
      
      const remainingNetPayable = Math.max(0, totalDeliverGrossBAll - totalCommissionPaid - totalPaid);
      const outstandingCommission = Math.max(0, totalDeliverCmsnAll - totalCommissionPaid);

      document.getElementById('pay-carpet-bajar-gross-binai').textContent = formatBinaiAmount(lastReturnGrossBinai);
      document.getElementById('pay-carpet-bajar-commission').textContent = formatBinaiAmount(lastReturnCommission);
      document.getElementById('pay-total-outstanding-commission').textContent = formatBinaiAmount(outstandingCommission);
      document.getElementById('pay-remaining-binai').textContent = formatBinaiAmount(remainingNetPayable);

      document.getElementById('pay-date-input').valueAsDate = new Date();
      document.getElementById('pay-amount-input').focus();
      updateLayout();
    }

    async function handlePaymentSubmit(event, isCommissionOnly = false) {
        event.preventDefault();
        const form = document.getElementById('pay-amount-form');
        const formData = new FormData(form);
        const profile = (currentOrderType === "company") ? selectedCompanyProfile : selectedContractorProfile;

        if (!profile) { alert("Error: Profile context lost for payment."); return; }
        
        const profileNameKey = profile.name.replace(/[^a-zA-Z0-9]/g, '_');
        const amountInput = document.getElementById('pay-amount-input');
        const amount = parseFloat(formData.get('amount')) || 0;
        
        const orders = Object.values((currentOrderType === "company" ? companyOrders[profileNameKey] : contractorOrders[profileNameKey]) || {});
        const payments = Object.values((currentOrderType === "company" ? companyPayments[profileNameKey] : contractorPayments[profileNameKey]) || {});
        
        let totalDeliverCmsnAll = 0, totalDeliverGrossBAll = 0;
        orders.forEach(o => {
            if (o.isReturn) {
                totalDeliverGrossBAll += Math.abs(o.binaiAmount || 0);
                totalDeliverCmsnAll += o.cmsnAmount || 0;
            }
        });
        const totalPaid = payments.reduce((sum, p) => sum + (Number(p.amount) || 0), 0);
        const totalCommissionPaid = payments.reduce((sum, p) => sum + (Number(p.commission_amount) || 0), 0);
        const remainingNetPayable = Math.max(0, totalDeliverGrossBAll - totalCommissionPaid - totalPaid);
        const outstandingCommission = Math.max(0, totalDeliverCmsnAll - totalCommissionPaid);

        let paymentData = {
            id: Date.now(), 
            date: formData.get('date'),
            amount: 0,
            commission_amount: 0,
            mode: formData.get('payment-mode'),
        };

        if (isCommissionOnly) {
            paymentData.commission_amount = outstandingCommission;
            if (paymentData.commission_amount <= 0) { alert("No outstanding commission to pay."); return; }
        } else {
            paymentData.amount = amount;
            if (paymentData.amount <= 0) { alert("Payment amount must be greater than zero."); amountInput.focus(); return; }
            if (paymentData.amount > remainingNetPayable + 0.001) { 
                 alert(`Payment amount (${formatBinaiAmount(paymentData.amount)}) exceeds remaining net payable amount (${formatBinaiAmount(remainingNetPayable)}).`);
                 amountInput.focus(); return;
            }
        }
        
        if (!paymentData.date || !paymentData.mode) { alert("Date and Payment Mode are required."); return; }
        
        const path = `${currentOrderType}Payments/${profileNameKey}/${paymentData.id}`;
        
        const paymentsObject = currentOrderType === 'company' ? companyPayments : contractorPayments;
        if (!paymentsObject[profileNameKey]) paymentsObject[profileNameKey] = {};
        paymentsObject[profileNameKey][paymentData.id] = paymentData;

        await saveData(path, paymentsObject[profileNameKey], `${currentOrderType}Payments`, profileNameKey);
        
        alert('Payment saved successfully.');
        form.reset(); 
        cancelToOrders();
    }

    function showPaymentDetailSection(type) {
      const profile = (type === "company") ? selectedCompanyProfile : selectedContractorProfile;
      if (!profile) { alert(`Please select a profile first.`); return; }

      hideAllSections();
      document.getElementById('payment-detail-section').style.display = 'block';
      currentOrderType = type;

      document.getElementById('payment-detail-name').textContent = profile.name;

      const profileNameKey = profile.name.replace(/[^a-zA-Z0-9]/g, '_');
      const orders = Object.values((type === "company" ? companyOrders[profileNameKey] : contractorOrders[profileNameKey]) || {});
      const payments = Object.values((type === "company" ? companyPayments[profileNameKey] : contractorPayments[profileNameKey]) || {});

      let totalReceivedGrossB = 0, totalReceivedFG = 0, totalCmsnOnReceived = 0;
      let totalDeliverGrossB = 0, totalDeliverFG = 0, totalCmsnOnDeliver = 0;

      orders.forEach(o => {
        const grossBinai = Math.abs(Number(o.binaiAmount) || 0); 
        const fg = Math.abs(Number(o.finalGaj) || 0);
        const cmsn = Number(o.cmsnAmount) || 0; 

        if (o.isReturn) { 
            totalDeliverGrossB += grossBinai; 
            totalDeliverFG += fg; 
            totalCmsnOnDeliver += cmsn;
        } else { 
            totalReceivedGrossB += grossBinai;
            totalReceivedFG += fg;
            totalCmsnOnReceived += cmsn;
        }
      });
      
      const totalReceivedNetB = totalReceivedGrossB - totalCmsnOnReceived;
      const totalDeliverNetB = totalDeliverGrossB - totalCmsnOnDeliver;
      
      const totalBalanceNetB = totalReceivedNetB - totalDeliverNetB;
      const totalBalanceFG = totalReceivedFG - totalDeliverFG;
      
      const avgReceivedRate = calculateAverageRate(orders, o => !o.isReturn);
      const avgDeliverRate = calculateAverageRate(orders, o => o.isReturn);

      const totalPaid = payments.reduce((sum, p) => sum + (Number(p.amount) || 0), 0);
      const totalCommissionPaid = payments.reduce((sum, p) => sum + (Number(p.commission_amount) || 0), 0);
      const effectiveCmsnDeliver = totalCmsnOnDeliver - totalCommissionPaid;
      const outstanding = Math.max(0, totalDeliverGrossB - totalCommissionPaid - totalPaid); 

      document.getElementById('total-received-finalgaj').textContent = formatNumber(totalReceivedFG);
      document.getElementById('avg-received-rate-display').textContent = formatNumber(avgReceivedRate);
      document.getElementById('total-received-binai-gross').textContent = formatBinaiAmount(totalReceivedGrossB);
      document.getElementById('total-commission-on-received').textContent = formatBinaiAmount(totalCmsnOnReceived);
      document.getElementById('total-received-binai-net').textContent = formatBinaiAmount(totalReceivedNetB);

      document.getElementById('total-deliver-finalgaj').textContent = formatNumber(totalDeliverFG);
      document.getElementById('avg-deliver-rate-display-summary').textContent = formatNumber(avgDeliverRate);
      document.getElementById('total-deliver-binai-gross').textContent = formatBinaiAmount(totalDeliverGrossB);
      document.getElementById('total-commission-on-deliver').textContent = formatBinaiAmount(Math.max(0, effectiveCmsnDeliver));
      document.getElementById('total-deliver-binai-net').textContent = formatBinaiAmount(totalDeliverNetB);
      
      document.getElementById('total-balance-finalgaj').textContent = formatNumber(totalBalanceFG);
      document.getElementById('total-balance-binai').textContent = formatBinaiAmount(totalBalanceNetB);

      document.getElementById('total-deliver-binai-payment').textContent = formatBinaiAmount(totalDeliverNetB);
      document.getElementById('total-paid-amount').textContent = formatBinaiAmount(totalPaid);
      document.getElementById('total-commission-paid').textContent = formatBinaiAmount(totalCommissionPaid);
      document.getElementById('outstanding-amount').textContent = formatBinaiAmount(outstanding);

      const tbody = document.getElementById('payment-history-table').querySelector('tbody');
      tbody.innerHTML = ""; 
      if (payments.length > 0) {
        payments.sort((a, b) => new Date(b.date) - new Date(a.date) || (b.id - a.id)).forEach(p => { 
          const tr = tbody.insertRow();
          tr.insertCell().textContent = formatDateForDisplay(p.date);
          tr.insertCell().textContent = formatBinaiAmount(p.amount);
          tr.insertCell().textContent = formatBinaiAmount(p.commission_amount || 0); // New Column
          tr.insertCell().textContent = p.mode; 
        });
      } else {
          const tr = tbody.insertRow();
          const td = tr.insertCell();
          td.colSpan = 4; td.textContent = "No payment history found."; td.style.textAlign = "center";
      }

      updateLayout(); 
    }

    // --- File Upload and Restore ---
    async function uploadAppFile(type, file) { 
        if (!navigator.onLine) { alert("File upload requires an internet connection."); return; }
        if (!file) return;
        if (type === 'logo' && !file.type.startsWith('image/')) {
            alert("Logo must be an image file (PNG, JPG, GIF, etc.)."); return;
        }

        const storageRef = storage.ref();
        const fileRef = storageRef.child(`${type}/${file.name}`);
        try {
            await fileRef.put(file);
            const fileUrl = await fileRef.getDownloadURL();
            
            appSettings[type] = fileUrl; 
            await updateData('settings', { [type]: fileUrl }, 'settings', 'appSettingsKey', appSettings);
            
            alert(`${ucfirst(type.replace('_', '-'))} uploaded successfully.`); 
            updateAppSettingsUI(); 
            closeSidebar();
            
        } catch (error) {
            console.error('File upload error:', error);
            alert(`Upload error: ${error.message}`);
        }
    }


    async function restoreBackup(fileInput) {
        const file = fileInput.files[0];
        if (!file) { alert('Please select a backup file (.json).'); return; }
        if (!file.name.toLowerCase().endsWith('.json')) {
            alert('Invalid file type. Please select a JSON backup file.');
            fileInput.value = null; return; 
        }

        const confirmation = prompt(`Type 'RESTORE' (all caps) to confirm overwriting all current data with this backup:\n\n"${file.name}"`);
        if (confirmation !== 'RESTORE') {
            alert('Restore cancelled.');
            fileInput.value = null; return;
        }
        
        if (!navigator.onLine) { alert("Restore requires an internet connection."); return; }

        const reader = new FileReader();
        reader.onload = async (e) => {
            try {
                const backupData = JSON.parse(e.target.result);
                await db.ref().set(backupData); // Overwrite root
                alert('Data restored successfully! The application will now reload to apply changes.');
                location.reload(); 
            } catch (error) {
                alert(`Restore failed: ${error.message}`);
                fileInput.value = null;
            }
        };
        reader.readAsText(file);
    }


    // --- Backup Function ---
    async function backupData() {
        if (!confirm('Create and download a full data backup file?')) return;
        console.log("Starting backup...");
        document.body.style.cursor = 'wait';

        try {
            // बैकअप के लिए हमेशा लोकल डेटा का उपयोग करें ताकि ऑफ़लाइन काम करे
            const dataToBackup = {};
            for(const store of OBJECT_STORES){
                if(store !== 'syncQueue'){
                     dataToBackup[store] = await getAllDataFromLocalDB(store);
                }
            }

            const jsonData = JSON.stringify(dataToBackup, null, 2); 
            const blob = new Blob([jsonData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            const timestamp = new Date().toISOString().replace(/[: T Z .-]/g, '').slice(0, 14); 
            a.download = `mhqadri_backup_${timestamp}.json`;
            document.body.appendChild(a);
            a.click(); 
            document.body.removeChild(a); 
            URL.revokeObjectURL(url); 

            alert('Data backup downloaded successfully.');
            closeSidebar();
        } catch (error) { 
            console.error('Backup process error:', error);
            alert(`An unexpected error occurred during backup: ${error.message}`);
        } finally {
            document.body.style.cursor = 'default';
        }
    }

    function updateAppSettingsUI() {
        console.log("Updating UI based on settings:", appSettings);

        const logoImg = document.getElementById('logo');
        if (logoImg) {
            if (appSettings.logo) {
                logoImg.src = appSettings.logo + '?t=' + Date.now(); 
                logoImg.style.display = 'inline';
            } else {
                logoImg.style.display = 'none';
            }
        }

        const mainHeaderTitleVal = appSettings.main_header_title || 'MH Qadri Export Rugs';
        const mainHeaderTitleEl = document.getElementById('main-header-title');
        if (mainHeaderTitleEl) {
            mainHeaderTitleEl.textContent = mainHeaderTitleVal;
        }

        const companyOrderHeaderVal = appSettings.company_order_header_title || 'MH Qadri Export Rugs - Company';
        const companyOrderHeaderEl = document.getElementById('company-main-title');
        if (companyOrderHeaderEl) {
            companyOrderHeaderEl.textContent = companyOrderHeaderVal;
        }

        const contractorTitleVal = appSettings.contractor_order_header_title || 'MH Qadri Export Rugs - Contractor';
        const contractorTitleEl = document.getElementById('contractor-title');
        if (contractorTitleEl) {
            contractorTitleEl.textContent = contractorTitleVal;
        }

        const paymentDetailHeaderVal = appSettings.payment_detail_header_title || 'MH Qadri Export Rugs - Payment';
        const paymentDetailHeaderEl = document.getElementById('payment-detail-main-title');
        if (paymentDetailHeaderEl) {
            paymentDetailHeaderEl.textContent = paymentDetailHeaderVal;
        }

        const companyViewSubtitleVal = appSettings.company_view_subtitle || 'Mirzapur (Company View)';
        const companyViewSubtitleEl = document.getElementById('contractor-subtitle-company');
        if (companyViewSubtitleEl) {
            companyViewSubtitleEl.textContent = companyViewSubtitleVal;
        }

        const contractorViewSubtitleVal = appSettings.contractor_view_subtitle || 'Mirzapur (Contractor View)';
        const contractorViewSubtitleEl = document.getElementById('contractor-subtitle');
        if (contractorViewSubtitleEl) {
            contractorViewSubtitleEl.textContent = contractorViewSubtitleVal;
        }

        const addressText = appSettings.app_address_details_text || DEFAULT_ADDRESS_DETAILS;
        document.querySelectorAll('.js-app-address-display').forEach(el => {
            el.innerText = addressText; 
        });

        updateLayout();
    }


    async function editTitle(element, settingKey) {
        if (!element || element.querySelector('input, textarea')) return; 

        const tagName = element.tagName.toLowerCase();
        let currentTextForEdit;
        let editor;

        if (['div', 'p'].includes(tagName) || settingKey === 'app_address_details_text') {
            currentTextForEdit = element.innerText; 
            editor = document.createElement('textarea');
            editor.value = currentTextForEdit;
            editor.style.cssText = `width: 90%; height: 80px; font-size: inherit; font-family: inherit; border: 1px solid #ccc; padding: 4px; margin: 0; box-sizing: border-box; resize: vertical;`;
        } else {
            currentTextForEdit = element.textContent;
            editor = document.createElement('input');
            editor.type = 'text';
            editor.value = currentTextForEdit;
            editor.style.cssText = `width: 90%; font-size: inherit; font-weight: inherit; text-align: ${element.style.textAlign || 'center'}; border: 1px solid #ccc; padding: 2px 4px; margin: 0; box-sizing: border-box;`;
        }

        element.innerHTML = ''; 
        element.appendChild(editor);
        editor.focus();
        if (editor.select) editor.select();

        const saveChanges = async (event) => {
            if (event && event.target !== editor) return;

            const newTextForStorage = editor.value.trim(); 
            const newTextForDisplay = editor.value; 

            editor.removeEventListener('blur', saveChanges);
            editor.removeEventListener('keypress', handleKeyPress);
            
            if (newTextForStorage === '' || newTextForStorage === currentTextForEdit.trim()) {
                if (editor.tagName.toLowerCase() === 'textarea') element.innerText = currentTextForEdit;
                else element.textContent = currentTextForEdit;
                return;
            }

            if (editor.tagName.toLowerCase() === 'textarea') element.innerText = newTextForDisplay;
            else element.textContent = newTextForStorage;

            appSettings[settingKey] = newTextForStorage;
            await updateData(`settings`, { [settingKey]: newTextForStorage }, 'settings', 'appSettingsKey', appSettings);

            if (settingKey === 'app_address_details_text') {
                document.querySelectorAll('.js-app-address-display').forEach(el_instance => {
                    el_instance.innerText = newTextForDisplay; 
                });
            }
        };

        const handleKeyPress = (e) => {
            if (e.key === 'Enter') {
                if (editor.tagName.toLowerCase() === 'textarea' && !e.shiftKey) {
                    editor.blur();
                } else if (editor.tagName.toLowerCase() === 'input') {
                    editor.blur();
                }
            } else if (e.key === 'Escape') {
                editor.removeEventListener('blur', saveChanges);
                editor.removeEventListener('keypress', handleKeyPress);
                if (editor.tagName.toLowerCase() === 'textarea') element.innerText = currentTextForEdit;
                else element.textContent = currentTextForEdit;
            }
        };

        editor.addEventListener('blur', saveChanges);
        editor.addEventListener('keypress', handleKeyPress);
    }

    // --- PDF Download Functions ---
    function downloadPDF(type, isReturnReport) {
        const profile = type === 'company' ? selectedCompanyProfile : selectedContractorProfile;
        if (!profile) { alert(`Please select a ${type} profile first.`); return; }

        const containerId = `${type}-orders-container`;
        const container = document.getElementById(containerId);
        if (!container || container.classList.contains('hidden')) {
            alert("No order data available to generate PDF."); return;
        }

        let columnsToShow = ["date", "size", "gaj", "peace", "final gaj", "rate", "cmsn rate", "cmsn amt", "binai amt", "net binai amt", "desc"];
        if (isReturnReport) {
            const katiOrWtIndex = columnsToShow.indexOf("rate") - 1; // Approximate position
            columnsToShow.splice(katiOrWtIndex < 0 ? columnsToShow.length -1 : katiOrWtIndex, 0, "katiorwt", "tanaormj");
            columnsToShow = columnsToShow.map(col => {
                if (col.toLowerCase() === "katiorwt") return "weight";
                if (col.toLowerCase() === "tanaormj") return "mat. jana";
                return col;
            });
        } else { 
            const katiOrWtIndex = columnsToShow.indexOf("rate") -1;
            columnsToShow.splice(katiOrWtIndex < 0 ? columnsToShow.length -1 : katiOrWtIndex, 0, "katiorwt", "tanaormj");
            columnsToShow = columnsToShow.map(col => {
                if (col.toLowerCase() === "katiorwt") return "kati";
                if (col.toLowerCase() === "tanaormj") return "tana";
                return col;
            });
        }
        const additionalCols = (profile.additional_columns || []).map(col => col.toLowerCase());
        columnsToShow.push(...additionalCols);


        const clone = container.cloneNode(true);
        clone.style.backgroundColor = '#fff'; 
        clone.querySelectorAll('.no-print, tr.editing, #sidebar-toggle').forEach(el => el.remove());

        const tablesToProcess = [];
        let pdfReportTitle = '';
        if (isReturnReport) {
            const returnTable = clone.querySelector(`#${type}-return-table`);
            if (returnTable && returnTable.querySelector('tbody tr') && returnTable.querySelector('tbody tr').cells.length > 1) tablesToProcess.push(returnTable);
            clone.querySelector(`#${type}-order-table`)?.closest('.table-container')?.remove(); 
            pdfReportTitle = "Carpet Bajar Report";
        } else { 
            const orderTable = clone.querySelector(`#${type}-order-table`);
            if (orderTable && orderTable.querySelector('tbody tr') && orderTable.querySelector('tbody tr').cells.length > 1) tablesToProcess.push(orderTable);
            clone.querySelector(`#${type}-return-section`)?.remove(); 
            pdfReportTitle = `${ucfirst(type)} Orders`;
        }
        clone.querySelector('.stock-issue-container')?.remove(); 

        if (tablesToProcess.length === 0) {
            alert(`No ${isReturnReport ? 'Carpet Bajar' : 'Order Issue'} data found to generate PDF.`);
            return;
        }
        
        const headerReportTypeTitleElement = clone.querySelector(`#${type}-order-header h3:not(.contractor-subtitle-display):not(#contractor-subtitle)`);
        if (headerReportTypeTitleElement) headerReportTypeTitleElement.textContent = pdfReportTitle;


        tablesToProcess.forEach(table => {
            const thead = table.querySelector('thead');
            const tbody = table.querySelector('tbody');
            if (!thead || !tbody) return;

            const headerCells = Array.from(thead.querySelectorAll('th'));
            const indicesToHide = [];
            
            headerCells.forEach((th, index) => {
                const originalColName = th.dataset.columnName || th.textContent || ''; 
                let currentTextContent = th.textContent.trim().toLowerCase();
                
                // Normalize for checking
                if (currentTextContent === "weight" || currentTextContent === "kati") currentTextContent = "katiorwt";
                if (currentTextContent === "mat. jana" || currentTextContent === "tana") currentTextContent = "tanaormj";
                if (currentTextContent === "net binai") currentTextContent = "net binai amt";


                let unifiedKey = originalColName.trim().toLowerCase();
                if (unifiedKey === "weight" || unifiedKey === "kati") unifiedKey = "katiorwt";
                if (unifiedKey === "mat. jana" || unifiedKey === "tana") unifiedKey = "tanaormj";
                if (unifiedKey === "net binai") unifiedKey = "net binai amt";


                const isActionColumn = (originalColName.toLowerCase() === "actions");
                const shouldShow = columnsToShow.includes(unifiedKey) || columnsToShow.includes(currentTextContent) ;

                if (!shouldShow && !isActionColumn) {
                    indicesToHide.push(index);
                } else if (isActionColumn) {
                     indicesToHide.push(index); 
                }
            });

            const applyClass = (rows) => Array.from(rows).forEach(row => Array.from(row.cells).forEach((cell, index) => {
                if (indicesToHide.includes(index)) cell.classList.add('print-hidden');
                else cell.classList.remove('print-hidden');
            }));
            applyClass(thead.rows);
            applyClass(tbody.rows);
            const tfoot = table.querySelector('tfoot'); if (tfoot) applyClass(tfoot.rows);

            if (type === 'contractor') {
                const companyIndex = headerCells.findIndex(th => (th.dataset.columnName || th.textContent).trim().toLowerCase() === 'company');
                if (companyIndex !== -1 && !columnsToShow.includes('company')) { 
                    const removeColumn = (tableRows) => Array.from(tableRows).forEach(r => {
                        if (r.cells[companyIndex]) r.deleteCell(companyIndex);
                    });
                    removeColumn(thead.rows);
                    removeColumn(tbody.rows);
                    if (tfoot) removeColumn(tfoot.rows);
                }
            }
        });


        const pdfFileNameBase = isReturnReport ? `${profile.name}_${type}_Bajar` : `${profile.name}_${type}_Orders`;
        const pdfFileName = `${pdfFileNameBase}_${new Date().toISOString().split('T')[0]}.pdf`;
        const opt = {
            margin: [0.5, 0.4, 0.5, 0.4], filename: pdfFileName,
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: { scale: 2, useCORS: true, logging: false, backgroundColor: null },
            jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
        };

        let mainPdfTitle, pdfSubtitle;
        if (type === 'company') {
            mainPdfTitle = appSettings.company_order_header_title || 'MH Qadri Export Rugs - Company';
            clone.querySelector(`#${type}-order-header h2#company-main-title`).textContent = mainPdfTitle;
            pdfSubtitle = appSettings.company_view_subtitle || 'Mirzapur (Company View)';
            clone.querySelector(`#${type}-order-header h3.contractor-subtitle-display`).textContent = pdfSubtitle;
        } else { 
            mainPdfTitle = appSettings.contractor_order_header_title || 'MH Qadri Export Rugs - Contractor';
            clone.querySelector(`#${type}-order-header h2#contractor-title`).textContent = mainPdfTitle;
            pdfSubtitle = appSettings.contractor_view_subtitle || 'Mirzapur (Contractor View)';
            clone.querySelector(`#${type}-order-header h3#contractor-subtitle`).textContent = pdfSubtitle;
        }


        html2pdf().from(clone).set(opt).save().catch(err => {
            console.error("Error creating PDF:", err); alert("Error creating PDF. Check console.");
        });
    }


    function downloadPaymentDetailPDF() {
        const profile = (currentOrderType === "company") ? selectedCompanyProfile : selectedContractorProfile;
      if (!profile) { alert(`Please select a profile first.`); return; }

      const container = document.getElementById("payment-detail-section");
      if (!container || container.style.display === 'none') {
          alert("No payment details visible to generate PDF."); return;
      }

      const clone = container.cloneNode(true);
      clone.style.backgroundColor = '#fff'; 
      clone.querySelectorAll('.no-print, .btn-group').forEach(el => el.remove());

      const mainPdfTitle = appSettings.payment_detail_header_title || 'MH Qadri Export Rugs - Payment';
      const titleElement = clone.querySelector('h2#payment-detail-main-title'); 
      if (titleElement) titleElement.textContent = mainPdfTitle;

      const pdfFileName = `${profile.name}_PaymentDetails_${new Date().toISOString().split('T')[0]}.pdf`;
      const opt = {
          margin: [0.5, 0.4, 0.5, 0.4], filename: pdfFileName,
          image: { type: 'jpeg', quality: 0.98 },
          html2canvas: { scale: 2, useCORS: true, logging: false, backgroundColor: null },
          jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
      };

      html2pdf().from(clone).set(opt).save().catch(err => {
          console.error("Payment Detail PDF error:", err); alert("Error creating Payment Detail PDF.");
      });
    }

    // --- Utility Functions ---
    function formatNumber(x) {
        const num = Number(x);
        if (isNaN(num)) return '0';
        if (Math.abs(num - Math.round(num)) < 0.00001) { 
            return Math.round(num).toString();
        }
        const s = num.toString();
        if (s.includes('.')) {
            return parseFloat(num.toFixed(2)).toString();
        }
        return s; 
    }
    function formatBinaiAmount(x) { // UPDATED: Always round for display
        const num = Number(x);
        if (isNaN(num)) return '₹ 0';
        try {
            const isNegative = num < 0;
            const absNum = Math.abs(num);
            const roundedAbsNum = Math.round(absNum); // Always round for final display

            let numStr = roundedAbsNum.toString();
            let lastThree = numStr.substring(numStr.length - 3);
            let otherNumbers = numStr.substring(0, numStr.length - 3);
            if (otherNumbers !== '') lastThree = ',' + lastThree;
            let formatted = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + lastThree;
            
            return (isNegative ? "₹ -" : "₹ ") + formatted;
        } catch (e) { 
            return (num < 0 ? "₹ -" : "₹ ") + Math.round(Math.abs(num)); 
        } 
    }
    function formatDateForDisplay(isoDateString) {
        if (!isoDateString || !isoDateString.match(/^\d{4}-\d{2}-\d{2}$/)) return 'N/A';
        try { const parts = isoDateString.split('-'); return `${parts[2]}/${parts[1]}/${parts[0]}`; }
        catch (e) { return isoDateString; }
    }
    function parseSizeToInches(sizeStr) {
        if (!sizeStr) throw new Error("Size string is empty.");
        sizeStr = String(sizeStr).trim();
        if (sizeStr.includes('.') && !isNaN(sizeStr.replace('.', ''))) {
            const parts = sizeStr.split('.');
            const feet = parseInt(parts[0], 10); const inches = parseInt(parts[1], 10);
            if (isNaN(feet) || isNaN(inches) || feet < 0 || inches < 0 || inches > 11) throw new Error(`Invalid 'feet.inches': "${sizeStr}".`);
            return (feet * 12) + inches;
        } else if (!isNaN(sizeStr) && !sizeStr.includes('.')) {
            const feetOnly = parseInt(sizeStr, 10);
            if (isNaN(feetOnly) || feetOnly < 0) throw new Error(`Invalid feet: "${sizeStr}".`);
            return feetOnly * 12;
        } else throw new Error(`Unsupported size: "${sizeStr}". Use 'feet' or 'feet.inches'.`);
    }
    function ucfirst(string) { return string ? string.charAt(0).toUpperCase() + string.slice(1) : ""; }
  </script>
</body>
</html>

